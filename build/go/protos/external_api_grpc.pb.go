// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: external.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalClient is the client API for External service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalClient interface {
	// Build a service map
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	// Figure out consumers/producers, pipelines and targets for a given service
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	// Get all available pipelines
	GetPipelines(ctx context.Context, in *GetPipelinesRequest, opts ...grpc.CallOption) (*GetPipelinesResponse, error)
	// Get a pipeline (and its steps)
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error)
	// Associate steps with a pipeline // Can also use this to set steps in one big push
	SetPipeline(ctx context.Context, in *SetPipelineRequest, opts ...grpc.CallOption) (*SetPipelineResponse, error)
	// Delete a pipeline
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error)
	// Get steps associated with a pipeline
	GetSteps(ctx context.Context, in *GetStepsRequest, opts ...grpc.CallOption) (*GetStepsResponse, error)
	// Create a step
	CreateStep(ctx context.Context, in *CreateStepRequest, opts ...grpc.CallOption) (*CreateStepResponse, error)
	// Update a step
	UpdateStep(ctx context.Context, in *UpdateStepRequest, opts ...grpc.CallOption) (*UpdateStepResponse, error)
	// Delete a step
	DeleteStep(ctx context.Context, in *DeleteStepRequest, opts ...grpc.CallOption) (*DeleteStepResponse, error)
	// Test method
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type externalClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalClient(cc grpc.ClientConnInterface) ExternalClient {
	return &externalClient{cc}
}

func (c *externalClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, "/protos.External/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/protos.External/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetPipelines(ctx context.Context, in *GetPipelinesRequest, opts ...grpc.CallOption) (*GetPipelinesResponse, error) {
	out := new(GetPipelinesResponse)
	err := c.cc.Invoke(ctx, "/protos.External/GetPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error) {
	out := new(GetPipelineResponse)
	err := c.cc.Invoke(ctx, "/protos.External/GetPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) SetPipeline(ctx context.Context, in *SetPipelineRequest, opts ...grpc.CallOption) (*SetPipelineResponse, error) {
	out := new(SetPipelineResponse)
	err := c.cc.Invoke(ctx, "/protos.External/SetPipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error) {
	out := new(DeletePipelineResponse)
	err := c.cc.Invoke(ctx, "/protos.External/DeletePipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) GetSteps(ctx context.Context, in *GetStepsRequest, opts ...grpc.CallOption) (*GetStepsResponse, error) {
	out := new(GetStepsResponse)
	err := c.cc.Invoke(ctx, "/protos.External/GetSteps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) CreateStep(ctx context.Context, in *CreateStepRequest, opts ...grpc.CallOption) (*CreateStepResponse, error) {
	out := new(CreateStepResponse)
	err := c.cc.Invoke(ctx, "/protos.External/CreateStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) UpdateStep(ctx context.Context, in *UpdateStepRequest, opts ...grpc.CallOption) (*UpdateStepResponse, error) {
	out := new(UpdateStepResponse)
	err := c.cc.Invoke(ctx, "/protos.External/UpdateStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) DeleteStep(ctx context.Context, in *DeleteStepRequest, opts ...grpc.CallOption) (*DeleteStepResponse, error) {
	out := new(DeleteStepResponse)
	err := c.cc.Invoke(ctx, "/protos.External/DeleteStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/protos.External/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalServer is the server API for External service.
// All implementations must embed UnimplementedExternalServer
// for forward compatibility
type ExternalServer interface {
	// Build a service map
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	// Figure out consumers/producers, pipelines and targets for a given service
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	// Get all available pipelines
	GetPipelines(context.Context, *GetPipelinesRequest) (*GetPipelinesResponse, error)
	// Get a pipeline (and its steps)
	GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error)
	// Associate steps with a pipeline // Can also use this to set steps in one big push
	SetPipeline(context.Context, *SetPipelineRequest) (*SetPipelineResponse, error)
	// Delete a pipeline
	DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error)
	// Get steps associated with a pipeline
	GetSteps(context.Context, *GetStepsRequest) (*GetStepsResponse, error)
	// Create a step
	CreateStep(context.Context, *CreateStepRequest) (*CreateStepResponse, error)
	// Update a step
	UpdateStep(context.Context, *UpdateStepRequest) (*UpdateStepResponse, error)
	// Delete a step
	DeleteStep(context.Context, *DeleteStepRequest) (*DeleteStepResponse, error)
	// Test method
	Test(context.Context, *TestRequest) (*TestResponse, error)
	mustEmbedUnimplementedExternalServer()
}

// UnimplementedExternalServer must be embedded to have forward compatible implementations.
type UnimplementedExternalServer struct {
}

func (UnimplementedExternalServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedExternalServer) GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedExternalServer) GetPipelines(context.Context, *GetPipelinesRequest) (*GetPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelines not implemented")
}
func (UnimplementedExternalServer) GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedExternalServer) SetPipeline(context.Context, *SetPipelineRequest) (*SetPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPipeline not implemented")
}
func (UnimplementedExternalServer) DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipeline not implemented")
}
func (UnimplementedExternalServer) GetSteps(context.Context, *GetStepsRequest) (*GetStepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSteps not implemented")
}
func (UnimplementedExternalServer) CreateStep(context.Context, *CreateStepRequest) (*CreateStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStep not implemented")
}
func (UnimplementedExternalServer) UpdateStep(context.Context, *UpdateStepRequest) (*UpdateStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStep not implemented")
}
func (UnimplementedExternalServer) DeleteStep(context.Context, *DeleteStepRequest) (*DeleteStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStep not implemented")
}
func (UnimplementedExternalServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedExternalServer) mustEmbedUnimplementedExternalServer() {}

// UnsafeExternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalServer will
// result in compilation errors.
type UnsafeExternalServer interface {
	mustEmbedUnimplementedExternalServer()
}

func RegisterExternalServer(s grpc.ServiceRegistrar, srv ExternalServer) {
	s.RegisterService(&External_ServiceDesc, srv)
}

func _External_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/GetPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetPipelines(ctx, req.(*GetPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/GetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_SetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).SetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/SetPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).SetPipeline(ctx, req.(*SetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/DeletePipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_GetSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).GetSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/GetSteps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).GetSteps(ctx, req.(*GetStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_CreateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).CreateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/CreateStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).CreateStep(ctx, req.(*CreateStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_UpdateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).UpdateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/UpdateStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).UpdateStep(ctx, req.(*UpdateStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_DeleteStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).DeleteStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/DeleteStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).DeleteStep(ctx, req.(*DeleteStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.External/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// External_ServiceDesc is the grpc.ServiceDesc for External service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var External_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.External",
	HandlerType: (*ExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServices",
			Handler:    _External_GetServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _External_GetService_Handler,
		},
		{
			MethodName: "GetPipelines",
			Handler:    _External_GetPipelines_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _External_GetPipeline_Handler,
		},
		{
			MethodName: "SetPipeline",
			Handler:    _External_SetPipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _External_DeletePipeline_Handler,
		},
		{
			MethodName: "GetSteps",
			Handler:    _External_GetSteps_Handler,
		},
		{
			MethodName: "CreateStep",
			Handler:    _External_CreateStep_Handler,
		},
		{
			MethodName: "UpdateStep",
			Handler:    _External_UpdateStep_Handler,
		},
		{
			MethodName: "DeleteStep",
			Handler:    _External_DeleteStep_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _External_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external.proto",
}
