// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sp_external.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:protos.GetAllRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetAllRequest {
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetAllRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAllRequest {
    fn default() -> &'a GetAllRequest {
        <GetAllRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAllRequest {
    pub fn new() -> GetAllRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAllRequest>(
            "GetAllRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAllRequest {
    const NAME: &'static str = "GetAllRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAllRequest {
        GetAllRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAllRequest {
        static instance: GetAllRequest = GetAllRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAllRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAllRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAllRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAllRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetAllResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetAllResponse {
    // message fields
    ///  Clients currently connected to the server
    // @@protoc_insertion_point(field:protos.GetAllResponse.live)
    pub live: ::std::vec::Vec<super::sp_info::LiveInfo>,
    ///  All of the audiences that are known to the server
    // @@protoc_insertion_point(field:protos.GetAllResponse.audiences)
    pub audiences: ::std::vec::Vec<super::sp_common::Audience>,
    ///  All of the pipelines known to the server + pipeline <-> audience mappings
    ///  key == pipeline_id; if "Audience" is not filled out - pipeline is not attached
    ///  to any audience.
    // @@protoc_insertion_point(field:protos.GetAllResponse.pipelines)
    pub pipelines: ::std::collections::HashMap<::std::string::String, super::sp_info::PipelineInfo>,
    ///  Audience to pipeline ID config/mapping.
    ///  key == $audience_as_string, value = $pipeline_id
    // @@protoc_insertion_point(field:protos.GetAllResponse.config)
    pub config: ::std::collections::HashMap<::std::string::String, GetAllResponsePipelines>,
    ///  When was this response generated. This is useful for determining what is
    ///  the latest update when using GetAllStream().
    // @@protoc_insertion_point(field:protos.GetAllResponse.generated_at_unix_ts_ns_utc)
    pub generated_at_unix_ts_ns_utc: i64,
    ///  Set by server to indicate that the response is a keepalive message
    // @@protoc_insertion_point(field:protos.GetAllResponse._keepalive)
    pub _keepalive: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetAllResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAllResponse {
    fn default() -> &'a GetAllResponse {
        <GetAllResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetAllResponse {
    pub fn new() -> GetAllResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "live",
            |m: &GetAllResponse| { &m.live },
            |m: &mut GetAllResponse| { &mut m.live },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "audiences",
            |m: &GetAllResponse| { &m.audiences },
            |m: &mut GetAllResponse| { &mut m.audiences },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "pipelines",
            |m: &GetAllResponse| { &m.pipelines },
            |m: &mut GetAllResponse| { &mut m.pipelines },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "config",
            |m: &GetAllResponse| { &m.config },
            |m: &mut GetAllResponse| { &mut m.config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "generated_at_unix_ts_ns_utc",
            |m: &GetAllResponse| { &m.generated_at_unix_ts_ns_utc },
            |m: &mut GetAllResponse| { &mut m.generated_at_unix_ts_ns_utc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_keepalive",
            |m: &GetAllResponse| { &m._keepalive },
            |m: &mut GetAllResponse| { &mut m._keepalive },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAllResponse>(
            "GetAllResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAllResponse {
    const NAME: &'static str = "GetAllResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.live.push(is.read_message()?);
                },
                18 => {
                    self.audiences.push(is.read_message()?);
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.pipelines.insert(key, value);
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.config.insert(key, value);
                },
                800 => {
                    self.generated_at_unix_ts_ns_utc = is.read_int64()?;
                },
                8000 => {
                    self._keepalive = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.live {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.audiences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.pipelines {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for (k, v) in &self.config {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if self.generated_at_unix_ts_ns_utc != 0 {
            my_size += ::protobuf::rt::int64_size(100, self.generated_at_unix_ts_ns_utc);
        }
        if let Some(v) = self._keepalive {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.live {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.audiences {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.pipelines {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for (k, v) in &self.config {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.generated_at_unix_ts_ns_utc != 0 {
            os.write_int64(100, self.generated_at_unix_ts_ns_utc)?;
        }
        if let Some(v) = self._keepalive {
            os.write_bool(1000, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAllResponse {
        GetAllResponse::new()
    }

    fn clear(&mut self) {
        self.live.clear();
        self.audiences.clear();
        self.pipelines.clear();
        self.config.clear();
        self.generated_at_unix_ts_ns_utc = 0;
        self._keepalive = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAllResponse {
        static instance: ::protobuf::rt::Lazy<GetAllResponse> = ::protobuf::rt::Lazy::new();
        instance.get(GetAllResponse::new)
    }
}

impl ::protobuf::MessageFull for GetAllResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAllResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAllResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAllResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetAllResponsePipelines)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetAllResponsePipelines {
    // message fields
    ///  List of pipeline IDs that are attached to this audience
    // @@protoc_insertion_point(field:protos.GetAllResponsePipelines.pipeline_ids)
    pub pipeline_ids: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetAllResponsePipelines.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAllResponsePipelines {
    fn default() -> &'a GetAllResponsePipelines {
        <GetAllResponsePipelines as ::protobuf::Message>::default_instance()
    }
}

impl GetAllResponsePipelines {
    pub fn new() -> GetAllResponsePipelines {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pipeline_ids",
            |m: &GetAllResponsePipelines| { &m.pipeline_ids },
            |m: &mut GetAllResponsePipelines| { &mut m.pipeline_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAllResponsePipelines>(
            "GetAllResponsePipelines",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAllResponsePipelines {
    const NAME: &'static str = "GetAllResponsePipelines";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_ids.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.pipeline_ids {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.pipeline_ids {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAllResponsePipelines {
        GetAllResponsePipelines::new()
    }

    fn clear(&mut self) {
        self.pipeline_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAllResponsePipelines {
        static instance: GetAllResponsePipelines = GetAllResponsePipelines {
            pipeline_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAllResponsePipelines {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAllResponsePipelines").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAllResponsePipelines {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAllResponsePipelines {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetPipelinesRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPipelinesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelinesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelinesRequest {
    fn default() -> &'a GetPipelinesRequest {
        <GetPipelinesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelinesRequest {
    pub fn new() -> GetPipelinesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelinesRequest>(
            "GetPipelinesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelinesRequest {
    const NAME: &'static str = "GetPipelinesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelinesRequest {
        GetPipelinesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelinesRequest {
        static instance: GetPipelinesRequest = GetPipelinesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPipelinesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelinesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelinesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelinesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetPipelinesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPipelinesResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetPipelinesResponse.pipelines)
    pub pipelines: ::std::vec::Vec<super::sp_pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelinesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelinesResponse {
    fn default() -> &'a GetPipelinesResponse {
        <GetPipelinesResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelinesResponse {
    pub fn new() -> GetPipelinesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pipelines",
            |m: &GetPipelinesResponse| { &m.pipelines },
            |m: &mut GetPipelinesResponse| { &mut m.pipelines },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelinesResponse>(
            "GetPipelinesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelinesResponse {
    const NAME: &'static str = "GetPipelinesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipelines.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.pipelines {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.pipelines {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelinesResponse {
        GetPipelinesResponse::new()
    }

    fn clear(&mut self) {
        self.pipelines.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelinesResponse {
        static instance: GetPipelinesResponse = GetPipelinesResponse {
            pipelines: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPipelinesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelinesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelinesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelinesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetPipelineRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.GetPipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelineRequest {
    fn default() -> &'a GetPipelineRequest {
        <GetPipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelineRequest {
    pub fn new() -> GetPipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &GetPipelineRequest| { &m.pipeline_id },
            |m: &mut GetPipelineRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelineRequest>(
            "GetPipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelineRequest {
    const NAME: &'static str = "GetPipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelineRequest {
        GetPipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelineRequest {
        static instance: GetPipelineRequest = GetPipelineRequest {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetPipelineResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPipelineResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetPipelineResponse.pipeline)
    pub pipeline: ::protobuf::MessageField<super::sp_pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelineResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelineResponse {
    fn default() -> &'a GetPipelineResponse {
        <GetPipelineResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelineResponse {
    pub fn new() -> GetPipelineResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_pipeline::Pipeline>(
            "pipeline",
            |m: &GetPipelineResponse| { &m.pipeline },
            |m: &mut GetPipelineResponse| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelineResponse>(
            "GetPipelineResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelineResponse {
    const NAME: &'static str = "GetPipelineResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelineResponse {
        GetPipelineResponse::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelineResponse {
        static instance: GetPipelineResponse = GetPipelineResponse {
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPipelineResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelineResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelineResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelineResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.CreatePipelineRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreatePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.CreatePipelineRequest.pipeline)
    pub pipeline: ::protobuf::MessageField<super::sp_pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.CreatePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreatePipelineRequest {
    fn default() -> &'a CreatePipelineRequest {
        <CreatePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreatePipelineRequest {
    pub fn new() -> CreatePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_pipeline::Pipeline>(
            "pipeline",
            |m: &CreatePipelineRequest| { &m.pipeline },
            |m: &mut CreatePipelineRequest| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreatePipelineRequest>(
            "CreatePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreatePipelineRequest {
    const NAME: &'static str = "CreatePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreatePipelineRequest {
        CreatePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreatePipelineRequest {
        static instance: CreatePipelineRequest = CreatePipelineRequest {
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreatePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreatePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreatePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreatePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.CreatePipelineResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreatePipelineResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.CreatePipelineResponse.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:protos.CreatePipelineResponse.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.CreatePipelineResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreatePipelineResponse {
    fn default() -> &'a CreatePipelineResponse {
        <CreatePipelineResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreatePipelineResponse {
    pub fn new() -> CreatePipelineResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &CreatePipelineResponse| { &m.message },
            |m: &mut CreatePipelineResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &CreatePipelineResponse| { &m.pipeline_id },
            |m: &mut CreatePipelineResponse| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreatePipelineResponse>(
            "CreatePipelineResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreatePipelineResponse {
    const NAME: &'static str = "CreatePipelineResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                18 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        if !self.pipeline_id.is_empty() {
            os.write_string(2, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreatePipelineResponse {
        CreatePipelineResponse::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreatePipelineResponse {
        static instance: CreatePipelineResponse = CreatePipelineResponse {
            message: ::std::string::String::new(),
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreatePipelineResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreatePipelineResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreatePipelineResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreatePipelineResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.UpdatePipelineRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UpdatePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.UpdatePipelineRequest.pipeline)
    pub pipeline: ::protobuf::MessageField<super::sp_pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.UpdatePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdatePipelineRequest {
    fn default() -> &'a UpdatePipelineRequest {
        <UpdatePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdatePipelineRequest {
    pub fn new() -> UpdatePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_pipeline::Pipeline>(
            "pipeline",
            |m: &UpdatePipelineRequest| { &m.pipeline },
            |m: &mut UpdatePipelineRequest| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdatePipelineRequest>(
            "UpdatePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdatePipelineRequest {
    const NAME: &'static str = "UpdatePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdatePipelineRequest {
        UpdatePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdatePipelineRequest {
        static instance: UpdatePipelineRequest = UpdatePipelineRequest {
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdatePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdatePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdatePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdatePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.DeletePipelineRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DeletePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DeletePipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DeletePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeletePipelineRequest {
    fn default() -> &'a DeletePipelineRequest {
        <DeletePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeletePipelineRequest {
    pub fn new() -> DeletePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &DeletePipelineRequest| { &m.pipeline_id },
            |m: &mut DeletePipelineRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeletePipelineRequest>(
            "DeletePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeletePipelineRequest {
    const NAME: &'static str = "DeletePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeletePipelineRequest {
        DeletePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeletePipelineRequest {
        static instance: DeletePipelineRequest = DeletePipelineRequest {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeletePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeletePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeletePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeletePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.AttachPipelineRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AttachPipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.AttachPipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.AttachPipelineRequest.audience)
    pub audience: ::protobuf::MessageField<super::sp_common::Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AttachPipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AttachPipelineRequest {
    fn default() -> &'a AttachPipelineRequest {
        <AttachPipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl AttachPipelineRequest {
    pub fn new() -> AttachPipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &AttachPipelineRequest| { &m.pipeline_id },
            |m: &mut AttachPipelineRequest| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Audience>(
            "audience",
            |m: &AttachPipelineRequest| { &m.audience },
            |m: &mut AttachPipelineRequest| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AttachPipelineRequest>(
            "AttachPipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AttachPipelineRequest {
    const NAME: &'static str = "AttachPipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AttachPipelineRequest {
        AttachPipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AttachPipelineRequest {
        static instance: AttachPipelineRequest = AttachPipelineRequest {
            pipeline_id: ::std::string::String::new(),
            audience: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AttachPipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AttachPipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AttachPipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttachPipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.DetachPipelineRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DetachPipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DetachPipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.DetachPipelineRequest.audience)
    pub audience: ::protobuf::MessageField<super::sp_common::Audience>,
    ///  Filled out by detach gRPC handler so that broadcast handlers can avoid
    ///  performing a lookup in NATS.
    // @@protoc_insertion_point(field:protos.DetachPipelineRequest._session_ids)
    pub _session_ids: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DetachPipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DetachPipelineRequest {
    fn default() -> &'a DetachPipelineRequest {
        <DetachPipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl DetachPipelineRequest {
    pub fn new() -> DetachPipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &DetachPipelineRequest| { &m.pipeline_id },
            |m: &mut DetachPipelineRequest| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Audience>(
            "audience",
            |m: &DetachPipelineRequest| { &m.audience },
            |m: &mut DetachPipelineRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "_session_ids",
            |m: &DetachPipelineRequest| { &m._session_ids },
            |m: &mut DetachPipelineRequest| { &mut m._session_ids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DetachPipelineRequest>(
            "DetachPipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DetachPipelineRequest {
    const NAME: &'static str = "DetachPipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                26 => {
                    self._session_ids.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self._session_ids {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self._session_ids {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DetachPipelineRequest {
        DetachPipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.audience.clear();
        self._session_ids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DetachPipelineRequest {
        static instance: DetachPipelineRequest = DetachPipelineRequest {
            pipeline_id: ::std::string::String::new(),
            audience: ::protobuf::MessageField::none(),
            _session_ids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DetachPipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DetachPipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DetachPipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetachPipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.PausePipelineRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PausePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.PausePipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.PausePipelineRequest.audience)
    pub audience: ::protobuf::MessageField<super::sp_common::Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PausePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PausePipelineRequest {
    fn default() -> &'a PausePipelineRequest {
        <PausePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl PausePipelineRequest {
    pub fn new() -> PausePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &PausePipelineRequest| { &m.pipeline_id },
            |m: &mut PausePipelineRequest| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Audience>(
            "audience",
            |m: &PausePipelineRequest| { &m.audience },
            |m: &mut PausePipelineRequest| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PausePipelineRequest>(
            "PausePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PausePipelineRequest {
    const NAME: &'static str = "PausePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PausePipelineRequest {
        PausePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PausePipelineRequest {
        static instance: PausePipelineRequest = PausePipelineRequest {
            pipeline_id: ::std::string::String::new(),
            audience: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PausePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PausePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PausePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PausePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.ResumePipelineRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResumePipelineRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.ResumePipelineRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.ResumePipelineRequest.audience)
    pub audience: ::protobuf::MessageField<super::sp_common::Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ResumePipelineRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResumePipelineRequest {
    fn default() -> &'a ResumePipelineRequest {
        <ResumePipelineRequest as ::protobuf::Message>::default_instance()
    }
}

impl ResumePipelineRequest {
    pub fn new() -> ResumePipelineRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &ResumePipelineRequest| { &m.pipeline_id },
            |m: &mut ResumePipelineRequest| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Audience>(
            "audience",
            |m: &ResumePipelineRequest| { &m.audience },
            |m: &mut ResumePipelineRequest| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResumePipelineRequest>(
            "ResumePipelineRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResumePipelineRequest {
    const NAME: &'static str = "ResumePipelineRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResumePipelineRequest {
        ResumePipelineRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResumePipelineRequest {
        static instance: ResumePipelineRequest = ResumePipelineRequest {
            pipeline_id: ::std::string::String::new(),
            audience: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResumePipelineRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResumePipelineRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResumePipelineRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResumePipelineRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Notifications
// @@protoc_insertion_point(message:protos.CreateNotificationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.CreateNotificationRequest.notification)
    pub notification: ::protobuf::MessageField<super::sp_notify::NotificationConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.CreateNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateNotificationRequest {
    fn default() -> &'a CreateNotificationRequest {
        <CreateNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateNotificationRequest {
    pub fn new() -> CreateNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_notify::NotificationConfig>(
            "notification",
            |m: &CreateNotificationRequest| { &m.notification },
            |m: &mut CreateNotificationRequest| { &mut m.notification },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateNotificationRequest>(
            "CreateNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateNotificationRequest {
    const NAME: &'static str = "CreateNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.notification)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.notification.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.notification.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateNotificationRequest {
        CreateNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateNotificationRequest {
        static instance: CreateNotificationRequest = CreateNotificationRequest {
            notification: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.UpdateNotificationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UpdateNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.UpdateNotificationRequest.notification)
    pub notification: ::protobuf::MessageField<super::sp_notify::NotificationConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.UpdateNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateNotificationRequest {
    fn default() -> &'a UpdateNotificationRequest {
        <UpdateNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateNotificationRequest {
    pub fn new() -> UpdateNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_notify::NotificationConfig>(
            "notification",
            |m: &UpdateNotificationRequest| { &m.notification },
            |m: &mut UpdateNotificationRequest| { &mut m.notification },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateNotificationRequest>(
            "UpdateNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateNotificationRequest {
    const NAME: &'static str = "UpdateNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.notification)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.notification.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.notification.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateNotificationRequest {
        UpdateNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateNotificationRequest {
        static instance: UpdateNotificationRequest = UpdateNotificationRequest {
            notification: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.DeleteNotificationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DeleteNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DeleteNotificationRequest.notification_id)
    pub notification_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DeleteNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteNotificationRequest {
    fn default() -> &'a DeleteNotificationRequest {
        <DeleteNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteNotificationRequest {
    pub fn new() -> DeleteNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notification_id",
            |m: &DeleteNotificationRequest| { &m.notification_id },
            |m: &mut DeleteNotificationRequest| { &mut m.notification_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteNotificationRequest>(
            "DeleteNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteNotificationRequest {
    const NAME: &'static str = "DeleteNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.notification_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.notification_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.notification_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.notification_id.is_empty() {
            os.write_string(1, &self.notification_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteNotificationRequest {
        DeleteNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteNotificationRequest {
        static instance: DeleteNotificationRequest = DeleteNotificationRequest {
            notification_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetNotificationsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetNotificationsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetNotificationsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetNotificationsRequest {
    fn default() -> &'a GetNotificationsRequest {
        <GetNotificationsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationsRequest {
    pub fn new() -> GetNotificationsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetNotificationsRequest>(
            "GetNotificationsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetNotificationsRequest {
    const NAME: &'static str = "GetNotificationsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetNotificationsRequest {
        GetNotificationsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetNotificationsRequest {
        static instance: GetNotificationsRequest = GetNotificationsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetNotificationsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetNotificationsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetNotificationsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetNotificationsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetNotificationsResponse {
    // message fields
    ///  Key == id of the notification config
    // @@protoc_insertion_point(field:protos.GetNotificationsResponse.notifications)
    pub notifications: ::std::collections::HashMap<::std::string::String, super::sp_notify::NotificationConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetNotificationsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetNotificationsResponse {
    fn default() -> &'a GetNotificationsResponse {
        <GetNotificationsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationsResponse {
    pub fn new() -> GetNotificationsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "notifications",
            |m: &GetNotificationsResponse| { &m.notifications },
            |m: &mut GetNotificationsResponse| { &mut m.notifications },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetNotificationsResponse>(
            "GetNotificationsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetNotificationsResponse {
    const NAME: &'static str = "GetNotificationsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.notifications.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.notifications {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.notifications {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetNotificationsResponse {
        GetNotificationsResponse::new()
    }

    fn clear(&mut self) {
        self.notifications.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetNotificationsResponse {
        static instance: ::protobuf::rt::Lazy<GetNotificationsResponse> = ::protobuf::rt::Lazy::new();
        instance.get(GetNotificationsResponse::new)
    }
}

impl ::protobuf::MessageFull for GetNotificationsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetNotificationsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetNotificationsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetNotificationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.GetNotificationRequest.notification_id)
    pub notification_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetNotificationRequest {
    fn default() -> &'a GetNotificationRequest {
        <GetNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationRequest {
    pub fn new() -> GetNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notification_id",
            |m: &GetNotificationRequest| { &m.notification_id },
            |m: &mut GetNotificationRequest| { &mut m.notification_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetNotificationRequest>(
            "GetNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetNotificationRequest {
    const NAME: &'static str = "GetNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.notification_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.notification_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.notification_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.notification_id.is_empty() {
            os.write_string(1, &self.notification_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetNotificationRequest {
        GetNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetNotificationRequest {
        static instance: GetNotificationRequest = GetNotificationRequest {
            notification_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetNotificationResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetNotificationResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetNotificationResponse.notification)
    pub notification: ::protobuf::MessageField<super::sp_notify::NotificationConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetNotificationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetNotificationResponse {
    fn default() -> &'a GetNotificationResponse {
        <GetNotificationResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationResponse {
    pub fn new() -> GetNotificationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_notify::NotificationConfig>(
            "notification",
            |m: &GetNotificationResponse| { &m.notification },
            |m: &mut GetNotificationResponse| { &mut m.notification },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetNotificationResponse>(
            "GetNotificationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetNotificationResponse {
    const NAME: &'static str = "GetNotificationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.notification)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.notification.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.notification.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetNotificationResponse {
        GetNotificationResponse::new()
    }

    fn clear(&mut self) {
        self.notification.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetNotificationResponse {
        static instance: GetNotificationResponse = GetNotificationResponse {
            notification: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetNotificationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetNotificationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetNotificationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.AttachNotificationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AttachNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.AttachNotificationRequest.notification_id)
    pub notification_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.AttachNotificationRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AttachNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AttachNotificationRequest {
    fn default() -> &'a AttachNotificationRequest {
        <AttachNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl AttachNotificationRequest {
    pub fn new() -> AttachNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notification_id",
            |m: &AttachNotificationRequest| { &m.notification_id },
            |m: &mut AttachNotificationRequest| { &mut m.notification_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &AttachNotificationRequest| { &m.pipeline_id },
            |m: &mut AttachNotificationRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AttachNotificationRequest>(
            "AttachNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AttachNotificationRequest {
    const NAME: &'static str = "AttachNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.notification_id = is.read_string()?;
                },
                18 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.notification_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.notification_id);
        }
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.notification_id.is_empty() {
            os.write_string(1, &self.notification_id)?;
        }
        if !self.pipeline_id.is_empty() {
            os.write_string(2, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AttachNotificationRequest {
        AttachNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification_id.clear();
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AttachNotificationRequest {
        static instance: AttachNotificationRequest = AttachNotificationRequest {
            notification_id: ::std::string::String::new(),
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AttachNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AttachNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AttachNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttachNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.DetachNotificationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DetachNotificationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DetachNotificationRequest.notification_id)
    pub notification_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.DetachNotificationRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DetachNotificationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DetachNotificationRequest {
    fn default() -> &'a DetachNotificationRequest {
        <DetachNotificationRequest as ::protobuf::Message>::default_instance()
    }
}

impl DetachNotificationRequest {
    pub fn new() -> DetachNotificationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notification_id",
            |m: &DetachNotificationRequest| { &m.notification_id },
            |m: &mut DetachNotificationRequest| { &mut m.notification_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &DetachNotificationRequest| { &m.pipeline_id },
            |m: &mut DetachNotificationRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DetachNotificationRequest>(
            "DetachNotificationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DetachNotificationRequest {
    const NAME: &'static str = "DetachNotificationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.notification_id = is.read_string()?;
                },
                18 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.notification_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.notification_id);
        }
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.notification_id.is_empty() {
            os.write_string(1, &self.notification_id)?;
        }
        if !self.pipeline_id.is_empty() {
            os.write_string(2, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DetachNotificationRequest {
        DetachNotificationRequest::new()
    }

    fn clear(&mut self) {
        self.notification_id.clear();
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DetachNotificationRequest {
        static instance: DetachNotificationRequest = DetachNotificationRequest {
            notification_id: ::std::string::String::new(),
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DetachNotificationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DetachNotificationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DetachNotificationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetachNotificationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.DeleteAudienceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DeleteAudienceRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DeleteAudienceRequest.audience)
    pub audience: ::protobuf::MessageField<super::sp_common::Audience>,
    ///  If true, will also detach all pipelines from the audience (if it has any)
    // @@protoc_insertion_point(field:protos.DeleteAudienceRequest.force)
    pub force: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DeleteAudienceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteAudienceRequest {
    fn default() -> &'a DeleteAudienceRequest {
        <DeleteAudienceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteAudienceRequest {
    pub fn new() -> DeleteAudienceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Audience>(
            "audience",
            |m: &DeleteAudienceRequest| { &m.audience },
            |m: &mut DeleteAudienceRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "force",
            |m: &DeleteAudienceRequest| { &m.force },
            |m: &mut DeleteAudienceRequest| { &mut m.force },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteAudienceRequest>(
            "DeleteAudienceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteAudienceRequest {
    const NAME: &'static str = "DeleteAudienceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                16 => {
                    self.force = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.force {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.force {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteAudienceRequest {
        DeleteAudienceRequest::new()
    }

    fn clear(&mut self) {
        self.audience.clear();
        self.force = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteAudienceRequest {
        static instance: DeleteAudienceRequest = DeleteAudienceRequest {
            audience: ::protobuf::MessageField::none(),
            force: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteAudienceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteAudienceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteAudienceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteAudienceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.DeleteServiceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DeleteServiceRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DeleteServiceRequest.service_name)
    pub service_name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.DeleteServiceRequest.force)
    pub force: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DeleteServiceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteServiceRequest {
    fn default() -> &'a DeleteServiceRequest {
        <DeleteServiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteServiceRequest {
    pub fn new() -> DeleteServiceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &DeleteServiceRequest| { &m.service_name },
            |m: &mut DeleteServiceRequest| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "force",
            |m: &DeleteServiceRequest| { &m.force },
            |m: &mut DeleteServiceRequest| { &mut m.force },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteServiceRequest>(
            "DeleteServiceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteServiceRequest {
    const NAME: &'static str = "DeleteServiceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service_name = is.read_string()?;
                },
                16 => {
                    self.force = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        if let Some(v) = self.force {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        if let Some(v) = self.force {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteServiceRequest {
        DeleteServiceRequest::new()
    }

    fn clear(&mut self) {
        self.service_name.clear();
        self.force = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteServiceRequest {
        static instance: DeleteServiceRequest = DeleteServiceRequest {
            service_name: ::std::string::String::new(),
            force: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteServiceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteServiceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteServiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteServiceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetMetricsRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetMetricsRequest {
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetMetricsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMetricsRequest {
    fn default() -> &'a GetMetricsRequest {
        <GetMetricsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMetricsRequest {
    pub fn new() -> GetMetricsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMetricsRequest>(
            "GetMetricsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMetricsRequest {
    const NAME: &'static str = "GetMetricsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMetricsRequest {
        GetMetricsRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMetricsRequest {
        static instance: GetMetricsRequest = GetMetricsRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMetricsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMetricsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMetricsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMetricsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetMetricsResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetMetricsResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetMetricsResponse.metrics)
    pub metrics: ::std::collections::HashMap<::std::string::String, super::sp_common::Metric>,
    ///  Set by server to indicate that the response is a keepalive message
    // @@protoc_insertion_point(field:protos.GetMetricsResponse._keepalive)
    pub _keepalive: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetMetricsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMetricsResponse {
    fn default() -> &'a GetMetricsResponse {
        <GetMetricsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMetricsResponse {
    pub fn new() -> GetMetricsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "metrics",
            |m: &GetMetricsResponse| { &m.metrics },
            |m: &mut GetMetricsResponse| { &mut m.metrics },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_keepalive",
            |m: &GetMetricsResponse| { &m._keepalive },
            |m: &mut GetMetricsResponse| { &mut m._keepalive },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMetricsResponse>(
            "GetMetricsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMetricsResponse {
    const NAME: &'static str = "GetMetricsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.metrics.insert(key, value);
                },
                8000 => {
                    self._keepalive = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.metrics {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self._keepalive {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.metrics {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self._keepalive {
            os.write_bool(1000, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMetricsResponse {
        GetMetricsResponse::new()
    }

    fn clear(&mut self) {
        self.metrics.clear();
        self._keepalive = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMetricsResponse {
        static instance: ::protobuf::rt::Lazy<GetMetricsResponse> = ::protobuf::rt::Lazy::new();
        instance.get(GetMetricsResponse::new)
    }
}

impl ::protobuf::MessageFull for GetMetricsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMetricsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMetricsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMetricsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetAudienceRatesRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetAudienceRatesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetAudienceRatesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAudienceRatesRequest {
    fn default() -> &'a GetAudienceRatesRequest {
        <GetAudienceRatesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAudienceRatesRequest {
    pub fn new() -> GetAudienceRatesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAudienceRatesRequest>(
            "GetAudienceRatesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAudienceRatesRequest {
    const NAME: &'static str = "GetAudienceRatesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAudienceRatesRequest {
        GetAudienceRatesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAudienceRatesRequest {
        static instance: GetAudienceRatesRequest = GetAudienceRatesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetAudienceRatesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAudienceRatesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAudienceRatesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAudienceRatesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetAudienceRatesResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetAudienceRatesResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetAudienceRatesResponse.rates)
    pub rates: ::std::collections::HashMap<::std::string::String, super::sp_common::AudienceRate>,
    ///  Set by server to indicate that the response is a keepalive message
    // @@protoc_insertion_point(field:protos.GetAudienceRatesResponse._keepalive)
    pub _keepalive: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetAudienceRatesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetAudienceRatesResponse {
    fn default() -> &'a GetAudienceRatesResponse {
        <GetAudienceRatesResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetAudienceRatesResponse {
    pub fn new() -> GetAudienceRatesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "rates",
            |m: &GetAudienceRatesResponse| { &m.rates },
            |m: &mut GetAudienceRatesResponse| { &mut m.rates },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_keepalive",
            |m: &GetAudienceRatesResponse| { &m._keepalive },
            |m: &mut GetAudienceRatesResponse| { &mut m._keepalive },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetAudienceRatesResponse>(
            "GetAudienceRatesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetAudienceRatesResponse {
    const NAME: &'static str = "GetAudienceRatesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.rates.insert(key, value);
                },
                8000 => {
                    self._keepalive = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.rates {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let Some(v) = self._keepalive {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.rates {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self._keepalive {
            os.write_bool(1000, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetAudienceRatesResponse {
        GetAudienceRatesResponse::new()
    }

    fn clear(&mut self) {
        self.rates.clear();
        self._keepalive = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetAudienceRatesResponse {
        static instance: ::protobuf::rt::Lazy<GetAudienceRatesResponse> = ::protobuf::rt::Lazy::new();
        instance.get(GetAudienceRatesResponse::new)
    }
}

impl ::protobuf::MessageFull for GetAudienceRatesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetAudienceRatesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetAudienceRatesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAudienceRatesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetSchemaRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetSchemaRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.GetSchemaRequest.audience)
    pub audience: ::protobuf::MessageField<super::sp_common::Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetSchemaRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSchemaRequest {
    fn default() -> &'a GetSchemaRequest {
        <GetSchemaRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetSchemaRequest {
    pub fn new() -> GetSchemaRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Audience>(
            "audience",
            |m: &GetSchemaRequest| { &m.audience },
            |m: &mut GetSchemaRequest| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSchemaRequest>(
            "GetSchemaRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSchemaRequest {
    const NAME: &'static str = "GetSchemaRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSchemaRequest {
        GetSchemaRequest::new()
    }

    fn clear(&mut self) {
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSchemaRequest {
        static instance: GetSchemaRequest = GetSchemaRequest {
            audience: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSchemaRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSchemaRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSchemaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSchemaRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetSchemaResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetSchemaResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.GetSchemaResponse.schema)
    pub schema: ::protobuf::MessageField<super::sp_common::Schema>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetSchemaResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSchemaResponse {
    fn default() -> &'a GetSchemaResponse {
        <GetSchemaResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetSchemaResponse {
    pub fn new() -> GetSchemaResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Schema>(
            "schema",
            |m: &GetSchemaResponse| { &m.schema },
            |m: &mut GetSchemaResponse| { &mut m.schema },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSchemaResponse>(
            "GetSchemaResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSchemaResponse {
    const NAME: &'static str = "GetSchemaResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.schema)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.schema.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSchemaResponse {
        GetSchemaResponse::new()
    }

    fn clear(&mut self) {
        self.schema.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSchemaResponse {
        static instance: GetSchemaResponse = GetSchemaResponse {
            schema: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSchemaResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSchemaResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSchemaResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSchemaResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.AppRegistrationStatusRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AppRegistrationStatusRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.AppRegistrationStatusRequest.email)
    pub email: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AppRegistrationStatusRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AppRegistrationStatusRequest {
    fn default() -> &'a AppRegistrationStatusRequest {
        <AppRegistrationStatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl AppRegistrationStatusRequest {
    pub fn new() -> AppRegistrationStatusRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &AppRegistrationStatusRequest| { &m.email },
            |m: &mut AppRegistrationStatusRequest| { &mut m.email },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AppRegistrationStatusRequest>(
            "AppRegistrationStatusRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AppRegistrationStatusRequest {
    const NAME: &'static str = "AppRegistrationStatusRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.email = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AppRegistrationStatusRequest {
        AppRegistrationStatusRequest::new()
    }

    fn clear(&mut self) {
        self.email.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AppRegistrationStatusRequest {
        static instance: AppRegistrationStatusRequest = AppRegistrationStatusRequest {
            email: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AppRegistrationStatusRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AppRegistrationStatusRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AppRegistrationStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppRegistrationStatusRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.AppRegistrationStatusResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AppRegistrationStatusResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.AppRegistrationStatusResponse.status)
    pub status: ::protobuf::EnumOrUnknown<app_registration_status_response::Status>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AppRegistrationStatusResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AppRegistrationStatusResponse {
    fn default() -> &'a AppRegistrationStatusResponse {
        <AppRegistrationStatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl AppRegistrationStatusResponse {
    pub fn new() -> AppRegistrationStatusResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &AppRegistrationStatusResponse| { &m.status },
            |m: &mut AppRegistrationStatusResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AppRegistrationStatusResponse>(
            "AppRegistrationStatusResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AppRegistrationStatusResponse {
    const NAME: &'static str = "AppRegistrationStatusResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != ::protobuf::EnumOrUnknown::new(app_registration_status_response::Status::STATUS_UNSET) {
            my_size += ::protobuf::rt::int32_size(1, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != ::protobuf::EnumOrUnknown::new(app_registration_status_response::Status::STATUS_UNSET) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AppRegistrationStatusResponse {
        AppRegistrationStatusResponse::new()
    }

    fn clear(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(app_registration_status_response::Status::STATUS_UNSET);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AppRegistrationStatusResponse {
        static instance: AppRegistrationStatusResponse = AppRegistrationStatusResponse {
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AppRegistrationStatusResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AppRegistrationStatusResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AppRegistrationStatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppRegistrationStatusResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `AppRegistrationStatusResponse`
pub mod app_registration_status_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:protos.AppRegistrationStatusResponse.Status)
    pub enum Status {
        // @@protoc_insertion_point(enum_value:protos.AppRegistrationStatusResponse.Status.STATUS_UNSET)
        STATUS_UNSET = 0,
        // @@protoc_insertion_point(enum_value:protos.AppRegistrationStatusResponse.Status.STATUS_SUBMIT)
        STATUS_SUBMIT = 1,
        // @@protoc_insertion_point(enum_value:protos.AppRegistrationStatusResponse.Status.STATUS_VERIFY)
        STATUS_VERIFY = 2,
        // @@protoc_insertion_point(enum_value:protos.AppRegistrationStatusResponse.Status.STATUS_DONE)
        STATUS_DONE = 3,
    }

    impl ::protobuf::Enum for Status {
        const NAME: &'static str = "Status";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Status> {
            match value {
                0 => ::std::option::Option::Some(Status::STATUS_UNSET),
                1 => ::std::option::Option::Some(Status::STATUS_SUBMIT),
                2 => ::std::option::Option::Some(Status::STATUS_VERIFY),
                3 => ::std::option::Option::Some(Status::STATUS_DONE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Status> {
            match str {
                "STATUS_UNSET" => ::std::option::Option::Some(Status::STATUS_UNSET),
                "STATUS_SUBMIT" => ::std::option::Option::Some(Status::STATUS_SUBMIT),
                "STATUS_VERIFY" => ::std::option::Option::Some(Status::STATUS_VERIFY),
                "STATUS_DONE" => ::std::option::Option::Some(Status::STATUS_DONE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Status] = &[
            Status::STATUS_UNSET,
            Status::STATUS_SUBMIT,
            Status::STATUS_VERIFY,
            Status::STATUS_DONE,
        ];
    }

    impl ::protobuf::EnumFull for Status {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("AppRegistrationStatusResponse.Status").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Status {
        fn default() -> Self {
            Status::STATUS_UNSET
        }
    }

    impl Status {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Status>("AppRegistrationStatusResponse.Status")
        }
    }
}

// @@protoc_insertion_point(message:protos.AppRegistrationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AppRegistrationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.AppRegistrationRequest.email)
    pub email: ::std::string::String,
    // @@protoc_insertion_point(field:protos.AppRegistrationRequest.cluster_id)
    pub cluster_id: ::std::string::String,
    ///  Used for storage on ui-bff backend
    // @@protoc_insertion_point(field:protos.AppRegistrationRequest._code)
    pub _code: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AppRegistrationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AppRegistrationRequest {
    fn default() -> &'a AppRegistrationRequest {
        <AppRegistrationRequest as ::protobuf::Message>::default_instance()
    }
}

impl AppRegistrationRequest {
    pub fn new() -> AppRegistrationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &AppRegistrationRequest| { &m.email },
            |m: &mut AppRegistrationRequest| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cluster_id",
            |m: &AppRegistrationRequest| { &m.cluster_id },
            |m: &mut AppRegistrationRequest| { &mut m.cluster_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "_code",
            |m: &AppRegistrationRequest| { &m._code },
            |m: &mut AppRegistrationRequest| { &mut m._code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AppRegistrationRequest>(
            "AppRegistrationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AppRegistrationRequest {
    const NAME: &'static str = "AppRegistrationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.email = is.read_string()?;
                },
                18 => {
                    self.cluster_id = is.read_string()?;
                },
                802 => {
                    self._code = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        if !self.cluster_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cluster_id);
        }
        if !self._code.is_empty() {
            my_size += ::protobuf::rt::string_size(100, &self._code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        if !self.cluster_id.is_empty() {
            os.write_string(2, &self.cluster_id)?;
        }
        if !self._code.is_empty() {
            os.write_string(100, &self._code)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AppRegistrationRequest {
        AppRegistrationRequest::new()
    }

    fn clear(&mut self) {
        self.email.clear();
        self.cluster_id.clear();
        self._code.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AppRegistrationRequest {
        static instance: AppRegistrationRequest = AppRegistrationRequest {
            email: ::std::string::String::new(),
            cluster_id: ::std::string::String::new(),
            _code: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AppRegistrationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AppRegistrationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AppRegistrationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppRegistrationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.AppVerifyRegistrationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AppVerifyRegistrationRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.AppVerifyRegistrationRequest.email)
    pub email: ::std::string::String,
    // @@protoc_insertion_point(field:protos.AppVerifyRegistrationRequest.code)
    pub code: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AppVerifyRegistrationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AppVerifyRegistrationRequest {
    fn default() -> &'a AppVerifyRegistrationRequest {
        <AppVerifyRegistrationRequest as ::protobuf::Message>::default_instance()
    }
}

impl AppVerifyRegistrationRequest {
    pub fn new() -> AppVerifyRegistrationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &AppVerifyRegistrationRequest| { &m.email },
            |m: &mut AppVerifyRegistrationRequest| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &AppVerifyRegistrationRequest| { &m.code },
            |m: &mut AppVerifyRegistrationRequest| { &mut m.code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AppVerifyRegistrationRequest>(
            "AppVerifyRegistrationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AppVerifyRegistrationRequest {
    const NAME: &'static str = "AppVerifyRegistrationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.email = is.read_string()?;
                },
                18 => {
                    self.code = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        if !self.code.is_empty() {
            os.write_string(2, &self.code)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AppVerifyRegistrationRequest {
        AppVerifyRegistrationRequest::new()
    }

    fn clear(&mut self) {
        self.email.clear();
        self.code.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AppVerifyRegistrationRequest {
        static instance: AppVerifyRegistrationRequest = AppVerifyRegistrationRequest {
            email: ::std::string::String::new(),
            code: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AppVerifyRegistrationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AppVerifyRegistrationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AppVerifyRegistrationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppVerifyRegistrationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.AppRegisterRejectRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AppRegisterRejectRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.AppRegisterRejectRequest.cluster_id)
    pub cluster_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AppRegisterRejectRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AppRegisterRejectRequest {
    fn default() -> &'a AppRegisterRejectRequest {
        <AppRegisterRejectRequest as ::protobuf::Message>::default_instance()
    }
}

impl AppRegisterRejectRequest {
    pub fn new() -> AppRegisterRejectRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cluster_id",
            |m: &AppRegisterRejectRequest| { &m.cluster_id },
            |m: &mut AppRegisterRejectRequest| { &mut m.cluster_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AppRegisterRejectRequest>(
            "AppRegisterRejectRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AppRegisterRejectRequest {
    const NAME: &'static str = "AppRegisterRejectRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cluster_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.cluster_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.cluster_id.is_empty() {
            os.write_string(1, &self.cluster_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AppRegisterRejectRequest {
        AppRegisterRejectRequest::new()
    }

    fn clear(&mut self) {
        self.cluster_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AppRegisterRejectRequest {
        static instance: AppRegisterRejectRequest = AppRegisterRejectRequest {
            cluster_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AppRegisterRejectRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AppRegisterRejectRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AppRegisterRejectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppRegisterRejectRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.PauseTailRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PauseTailRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.PauseTailRequest.tail_id)
    pub tail_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PauseTailRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PauseTailRequest {
    fn default() -> &'a PauseTailRequest {
        <PauseTailRequest as ::protobuf::Message>::default_instance()
    }
}

impl PauseTailRequest {
    pub fn new() -> PauseTailRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tail_id",
            |m: &PauseTailRequest| { &m.tail_id },
            |m: &mut PauseTailRequest| { &mut m.tail_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PauseTailRequest>(
            "PauseTailRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PauseTailRequest {
    const NAME: &'static str = "PauseTailRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tail_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tail_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tail_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tail_id.is_empty() {
            os.write_string(1, &self.tail_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PauseTailRequest {
        PauseTailRequest::new()
    }

    fn clear(&mut self) {
        self.tail_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PauseTailRequest {
        static instance: PauseTailRequest = PauseTailRequest {
            tail_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PauseTailRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PauseTailRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PauseTailRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PauseTailRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.ResumeTailRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResumeTailRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.ResumeTailRequest.tail_id)
    pub tail_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ResumeTailRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResumeTailRequest {
    fn default() -> &'a ResumeTailRequest {
        <ResumeTailRequest as ::protobuf::Message>::default_instance()
    }
}

impl ResumeTailRequest {
    pub fn new() -> ResumeTailRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tail_id",
            |m: &ResumeTailRequest| { &m.tail_id },
            |m: &mut ResumeTailRequest| { &mut m.tail_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResumeTailRequest>(
            "ResumeTailRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResumeTailRequest {
    const NAME: &'static str = "ResumeTailRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tail_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.tail_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tail_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.tail_id.is_empty() {
            os.write_string(1, &self.tail_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResumeTailRequest {
        ResumeTailRequest::new()
    }

    fn clear(&mut self) {
        self.tail_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResumeTailRequest {
        static instance: ResumeTailRequest = ResumeTailRequest {
            tail_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResumeTailRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResumeTailRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResumeTailRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResumeTailRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetPipelineHistoryRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPipelineHistoryRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.GetPipelineHistoryRequest.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelineHistoryRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelineHistoryRequest {
    fn default() -> &'a GetPipelineHistoryRequest {
        <GetPipelineHistoryRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelineHistoryRequest {
    pub fn new() -> GetPipelineHistoryRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &GetPipelineHistoryRequest| { &m.pipeline_id },
            |m: &mut GetPipelineHistoryRequest| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelineHistoryRequest>(
            "GetPipelineHistoryRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelineHistoryRequest {
    const NAME: &'static str = "GetPipelineHistoryRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelineHistoryRequest {
        GetPipelineHistoryRequest::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelineHistoryRequest {
        static instance: GetPipelineHistoryRequest = GetPipelineHistoryRequest {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPipelineHistoryRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelineHistoryRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelineHistoryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelineHistoryRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.GetPipelineHistoryResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetPipelineHistoryResponse {
    // message fields
    ///  Key == version
    // @@protoc_insertion_point(field:protos.GetPipelineHistoryResponse.entries)
    pub entries: ::std::collections::HashMap<i32, super::sp_pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.GetPipelineHistoryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPipelineHistoryResponse {
    fn default() -> &'a GetPipelineHistoryResponse {
        <GetPipelineHistoryResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPipelineHistoryResponse {
    pub fn new() -> GetPipelineHistoryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "entries",
            |m: &GetPipelineHistoryResponse| { &m.entries },
            |m: &mut GetPipelineHistoryResponse| { &mut m.entries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPipelineHistoryResponse>(
            "GetPipelineHistoryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPipelineHistoryResponse {
    const NAME: &'static str = "GetPipelineHistoryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            8 => key = is.read_int32()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.entries.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.entries {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::int32_size(1, *k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.entries {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::int32_size(1, *k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_int32(1, *k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPipelineHistoryResponse {
        GetPipelineHistoryResponse::new()
    }

    fn clear(&mut self) {
        self.entries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPipelineHistoryResponse {
        static instance: ::protobuf::rt::Lazy<GetPipelineHistoryResponse> = ::protobuf::rt::Lazy::new();
        instance.get(GetPipelineHistoryResponse::new)
    }
}

impl ::protobuf::MessageFull for GetPipelineHistoryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPipelineHistoryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPipelineHistoryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPipelineHistoryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.TestRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TestRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.TestRequest.input)
    pub input: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TestRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestRequest {
    fn default() -> &'a TestRequest {
        <TestRequest as ::protobuf::Message>::default_instance()
    }
}

impl TestRequest {
    pub fn new() -> TestRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "input",
            |m: &TestRequest| { &m.input },
            |m: &mut TestRequest| { &mut m.input },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestRequest>(
            "TestRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestRequest {
    const NAME: &'static str = "TestRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.input = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.input);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.input.is_empty() {
            os.write_string(1, &self.input)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestRequest {
        TestRequest::new()
    }

    fn clear(&mut self) {
        self.input.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestRequest {
        static instance: TestRequest = TestRequest {
            input: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.TestResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TestResponse {
    // message fields
    // @@protoc_insertion_point(field:protos.TestResponse.output)
    pub output: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TestResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestResponse {
    fn default() -> &'a TestResponse {
        <TestResponse as ::protobuf::Message>::default_instance()
    }
}

impl TestResponse {
    pub fn new() -> TestResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "output",
            |m: &TestResponse| { &m.output },
            |m: &mut TestResponse| { &mut m.output },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestResponse>(
            "TestResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestResponse {
    const NAME: &'static str = "TestResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.output = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.output);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.output.is_empty() {
            os.write_string(2, &self.output)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestResponse {
        TestResponse::new()
    }

    fn clear(&mut self) {
        self.output.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestResponse {
        static instance: TestResponse = TestResponse {
            output: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11sp_external.proto\x12\x06protos\x1a\x0fsp_common.proto\x1a\rsp_inf\
    o.proto\x1a\x0fsp_notify.proto\x1a\x11sp_pipeline.proto\"\x0f\n\rGetAllR\
    equest\"\x88\x04\n\x0eGetAllResponse\x12$\n\x04live\x18\x01\x20\x03(\x0b\
    2\x10.protos.LiveInfoR\x04live\x12.\n\taudiences\x18\x02\x20\x03(\x0b2\
    \x10.protos.AudienceR\taudiences\x12C\n\tpipelines\x18\x03\x20\x03(\x0b2\
    %.protos.GetAllResponse.PipelinesEntryR\tpipelines\x12:\n\x06config\x18\
    \x04\x20\x03(\x0b2\".protos.GetAllResponse.ConfigEntryR\x06config\x12;\n\
    \x1bgenerated_at_unix_ts_ns_utc\x18d\x20\x01(\x03R\x16generatedAtUnixTsN\
    sUtc\x12#\n\n_keepalive\x18\xe8\x07\x20\x01(\x08H\0R\tKeepalive\x88\x01\
    \x01\x1aR\n\x0ePipelinesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03ke\
    y\x12*\n\x05value\x18\x02\x20\x01(\x0b2\x14.protos.PipelineInfoR\x05valu\
    e:\x028\x01\x1aZ\n\x0bConfigEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x125\n\x05value\x18\x02\x20\x01(\x0b2\x1f.protos.GetAllResponseP\
    ipelinesR\x05value:\x028\x01B\r\n\x0bX_keepalive\"<\n\x17GetAllResponseP\
    ipelines\x12!\n\x0cpipeline_ids\x18\x01\x20\x03(\tR\x0bpipelineIds\"\x15\
    \n\x13GetPipelinesRequest\"F\n\x14GetPipelinesResponse\x12.\n\tpipelines\
    \x18\x01\x20\x03(\x0b2\x10.protos.PipelineR\tpipelines\"5\n\x12GetPipeli\
    neRequest\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\tR\npipelineId\"C\n\
    \x13GetPipelineResponse\x12,\n\x08pipeline\x18\x01\x20\x01(\x0b2\x10.pro\
    tos.PipelineR\x08pipeline\"E\n\x15CreatePipelineRequest\x12,\n\x08pipeli\
    ne\x18\x01\x20\x01(\x0b2\x10.protos.PipelineR\x08pipeline\"S\n\x16Create\
    PipelineResponse\x12\x18\n\x07message\x18\x01\x20\x01(\tR\x07message\x12\
    \x1f\n\x0bpipeline_id\x18\x02\x20\x01(\tR\npipelineId\"E\n\x15UpdatePipe\
    lineRequest\x12,\n\x08pipeline\x18\x01\x20\x01(\x0b2\x10.protos.Pipeline\
    R\x08pipeline\"8\n\x15DeletePipelineRequest\x12\x1f\n\x0bpipeline_id\x18\
    \x01\x20\x01(\tR\npipelineId\"f\n\x15AttachPipelineRequest\x12\x1f\n\x0b\
    pipeline_id\x18\x01\x20\x01(\tR\npipelineId\x12,\n\x08audience\x18\x02\
    \x20\x01(\x0b2\x10.protos.AudienceR\x08audience\"\x88\x01\n\x15DetachPip\
    elineRequest\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\tR\npipelineId\
    \x12,\n\x08audience\x18\x02\x20\x01(\x0b2\x10.protos.AudienceR\x08audien\
    ce\x12\x20\n\x0c_session_ids\x18\x03\x20\x03(\tR\nSessionIds\"e\n\x14Pau\
    sePipelineRequest\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\tR\npipeline\
    Id\x12,\n\x08audience\x18\x02\x20\x01(\x0b2\x10.protos.AudienceR\x08audi\
    ence\"f\n\x15ResumePipelineRequest\x12\x1f\n\x0bpipeline_id\x18\x01\x20\
    \x01(\tR\npipelineId\x12,\n\x08audience\x18\x02\x20\x01(\x0b2\x10.protos\
    .AudienceR\x08audience\"[\n\x19CreateNotificationRequest\x12>\n\x0cnotif\
    ication\x18\x01\x20\x01(\x0b2\x1a.protos.NotificationConfigR\x0cnotifica\
    tion\"[\n\x19UpdateNotificationRequest\x12>\n\x0cnotification\x18\x01\
    \x20\x01(\x0b2\x1a.protos.NotificationConfigR\x0cnotification\"D\n\x19De\
    leteNotificationRequest\x12'\n\x0fnotification_id\x18\x01\x20\x01(\tR\
    \x0enotificationId\"\x19\n\x17GetNotificationsRequest\"\xd3\x01\n\x18Get\
    NotificationsResponse\x12Y\n\rnotifications\x18\x01\x20\x03(\x0b23.proto\
    s.GetNotificationsResponse.NotificationsEntryR\rnotifications\x1a\\\n\
    \x12NotificationsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x120\
    \n\x05value\x18\x02\x20\x01(\x0b2\x1a.protos.NotificationConfigR\x05valu\
    e:\x028\x01\"A\n\x16GetNotificationRequest\x12'\n\x0fnotification_id\x18\
    \x01\x20\x01(\tR\x0enotificationId\"Y\n\x17GetNotificationResponse\x12>\
    \n\x0cnotification\x18\x01\x20\x01(\x0b2\x1a.protos.NotificationConfigR\
    \x0cnotification\"e\n\x19AttachNotificationRequest\x12'\n\x0fnotificatio\
    n_id\x18\x01\x20\x01(\tR\x0enotificationId\x12\x1f\n\x0bpipeline_id\x18\
    \x02\x20\x01(\tR\npipelineId\"e\n\x19DetachNotificationRequest\x12'\n\
    \x0fnotification_id\x18\x01\x20\x01(\tR\x0enotificationId\x12\x1f\n\x0bp\
    ipeline_id\x18\x02\x20\x01(\tR\npipelineId\"j\n\x15DeleteAudienceRequest\
    \x12,\n\x08audience\x18\x01\x20\x01(\x0b2\x10.protos.AudienceR\x08audien\
    ce\x12\x19\n\x05force\x18\x02\x20\x01(\x08H\0R\x05force\x88\x01\x01B\x08\
    \n\x06_force\"^\n\x14DeleteServiceRequest\x12!\n\x0cservice_name\x18\x01\
    \x20\x01(\tR\x0bserviceName\x12\x19\n\x05force\x18\x02\x20\x01(\x08H\0R\
    \x05force\x88\x01\x01B\x08\n\x06_force\"\x13\n\x11GetMetricsRequest\"\
    \xd7\x01\n\x12GetMetricsResponse\x12A\n\x07metrics\x18\x01\x20\x03(\x0b2\
    '.protos.GetMetricsResponse.MetricsEntryR\x07metrics\x12#\n\n_keepalive\
    \x18\xe8\x07\x20\x01(\x08H\0R\tKeepalive\x88\x01\x01\x1aJ\n\x0cMetricsEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12$\n\x05value\x18\x02\
    \x20\x01(\x0b2\x0e.protos.MetricR\x05value:\x028\x01B\r\n\x0bX_keepalive\
    \"\x19\n\x17GetAudienceRatesRequest\"\xe1\x01\n\x18GetAudienceRatesRespo\
    nse\x12A\n\x05rates\x18\x01\x20\x03(\x0b2+.protos.GetAudienceRatesRespon\
    se.RatesEntryR\x05rates\x12#\n\n_keepalive\x18\xe8\x07\x20\x01(\x08H\0R\
    \tKeepalive\x88\x01\x01\x1aN\n\nRatesEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12*\n\x05value\x18\x02\x20\x01(\x0b2\x14.protos.Audienc\
    eRateR\x05value:\x028\x01B\r\n\x0bX_keepalive\"@\n\x10GetSchemaRequest\
    \x12,\n\x08audience\x18\x01\x20\x01(\x0b2\x10.protos.AudienceR\x08audien\
    ce\";\n\x11GetSchemaResponse\x12&\n\x06schema\x18\x01\x20\x01(\x0b2\x0e.\
    protos.SchemaR\x06schema\"4\n\x1cAppRegistrationStatusRequest\x12\x14\n\
    \x05email\x18\x01\x20\x01(\tR\x05email\"\xb8\x01\n\x1dAppRegistrationSta\
    tusResponse\x12D\n\x06status\x18\x01\x20\x01(\x0e2,.protos.AppRegistrati\
    onStatusResponse.StatusR\x06status\"Q\n\x06Status\x12\x10\n\x0cSTATUS_UN\
    SET\x10\0\x12\x11\n\rSTATUS_SUBMIT\x10\x01\x12\x11\n\rSTATUS_VERIFY\x10\
    \x02\x12\x0f\n\x0bSTATUS_DONE\x10\x03\"b\n\x16AppRegistrationRequest\x12\
    \x14\n\x05email\x18\x01\x20\x01(\tR\x05email\x12\x1d\n\ncluster_id\x18\
    \x02\x20\x01(\tR\tclusterId\x12\x13\n\x05_code\x18d\x20\x01(\tR\x04Code\
    \"H\n\x1cAppVerifyRegistrationRequest\x12\x14\n\x05email\x18\x01\x20\x01\
    (\tR\x05email\x12\x12\n\x04code\x18\x02\x20\x01(\tR\x04code\"9\n\x18AppR\
    egisterRejectRequest\x12\x1d\n\ncluster_id\x18\x01\x20\x01(\tR\tclusterI\
    d\"+\n\x10PauseTailRequest\x12\x17\n\x07tail_id\x18\x01\x20\x01(\tR\x06t\
    ailId\",\n\x11ResumeTailRequest\x12\x17\n\x07tail_id\x18\x01\x20\x01(\tR\
    \x06tailId\"<\n\x19GetPipelineHistoryRequest\x12\x1f\n\x0bpipeline_id\
    \x18\x01\x20\x01(\tR\npipelineId\"\xb5\x01\n\x1aGetPipelineHistoryRespon\
    se\x12I\n\x07entries\x18\x01\x20\x03(\x0b2/.protos.GetPipelineHistoryRes\
    ponse.EntriesEntryR\x07entries\x1aL\n\x0cEntriesEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\x05R\x03key\x12&\n\x05value\x18\x02\x20\x01(\x0b2\x10.\
    protos.PipelineR\x05value:\x028\x01\"#\n\x0bTestRequest\x12\x14\n\x05inp\
    ut\x18\x01\x20\x01(\tR\x05input\"&\n\x0cTestResponse\x12\x16\n\x06output\
    \x18\x02\x20\x01(\tR\x06output2\x8a\x13\n\x08External\x127\n\x06GetAll\
    \x12\x15.protos.GetAllRequest\x1a\x16.protos.GetAllResponse\x12?\n\x0cGe\
    tAllStream\x12\x15.protos.GetAllRequest\x1a\x16.protos.GetAllResponse0\
    \x01\x12I\n\x0cGetPipelines\x12\x1b.protos.GetPipelinesRequest\x1a\x1c.p\
    rotos.GetPipelinesResponse\x12F\n\x0bGetPipeline\x12\x1a.protos.GetPipel\
    ineRequest\x1a\x1b.protos.GetPipelineResponse\x12O\n\x0eCreatePipeline\
    \x12\x1d.protos.CreatePipelineRequest\x1a\x1e.protos.CreatePipelineRespo\
    nse\x12I\n\x0eUpdatePipeline\x12\x1d.protos.UpdatePipelineRequest\x1a\
    \x18.protos.StandardResponse\x12I\n\x0eDeletePipeline\x12\x1d.protos.Del\
    etePipelineRequest\x1a\x18.protos.StandardResponse\x12I\n\x0eAttachPipel\
    ine\x12\x1d.protos.AttachPipelineRequest\x1a\x18.protos.StandardResponse\
    \x12I\n\x0eDetachPipeline\x12\x1d.protos.DetachPipelineRequest\x1a\x18.p\
    rotos.StandardResponse\x12G\n\rPausePipeline\x12\x1c.protos.PausePipelin\
    eRequest\x1a\x18.protos.StandardResponse\x12I\n\x0eResumePipeline\x12\
    \x1d.protos.ResumePipelineRequest\x1a\x18.protos.StandardResponse\x12Q\n\
    \x12CreateNotification\x12!.protos.CreateNotificationRequest\x1a\x18.pro\
    tos.StandardResponse\x12Q\n\x12UpdateNotification\x12!.protos.UpdateNoti\
    ficationRequest\x1a\x18.protos.StandardResponse\x12Q\n\x12DeleteNotifica\
    tion\x12!.protos.DeleteNotificationRequest\x1a\x18.protos.StandardRespon\
    se\x12U\n\x10GetNotifications\x12\x1f.protos.GetNotificationsRequest\x1a\
    \x20.protos.GetNotificationsResponse\x12R\n\x0fGetNotification\x12\x1e.p\
    rotos.GetNotificationRequest\x1a\x1f.protos.GetNotificationResponse\x12Q\
    \n\x12AttachNotification\x12!.protos.AttachNotificationRequest\x1a\x18.p\
    rotos.StandardResponse\x12Q\n\x12DetachNotification\x12!.protos.DetachNo\
    tificationRequest\x1a\x18.protos.StandardResponse\x12I\n\x0eDeleteAudien\
    ce\x12\x1d.protos.DeleteAudienceRequest\x1a\x18.protos.StandardResponse\
    \x12G\n\rDeleteService\x12\x1c.protos.DeleteServiceRequest\x1a\x18.proto\
    s.StandardResponse\x12E\n\nGetMetrics\x12\x19.protos.GetMetricsRequest\
    \x1a\x1a.protos.GetMetricsResponse0\x01\x123\n\x04Tail\x12\x13.protos.Ta\
    ilRequest\x1a\x14.protos.TailResponse0\x01\x12?\n\tPauseTail\x12\x18.pro\
    tos.PauseTailRequest\x1a\x18.protos.StandardResponse\x12A\n\nResumeTail\
    \x12\x19.protos.ResumeTailRequest\x1a\x18.protos.StandardResponse\x12W\n\
    \x10GetAudienceRates\x12\x1f.protos.GetAudienceRatesRequest\x1a\x20.prot\
    os.GetAudienceRatesResponse0\x01\x12@\n\tGetSchema\x12\x18.protos.GetSch\
    emaRequest\x1a\x19.protos.GetSchemaResponse\x12d\n\x15AppRegistrationSta\
    tus\x12$.protos.AppRegistrationStatusRequest\x1a%.protos.AppRegistration\
    StatusResponse\x12G\n\x0bAppRegister\x12\x1e.protos.AppRegistrationReque\
    st\x1a\x18.protos.StandardResponse\x12W\n\x15AppVerifyRegistration\x12$.\
    protos.AppVerifyRegistrationRequest\x1a\x18.protos.StandardResponse\x12O\
    \n\x11AppRegisterReject\x12\x20.protos.AppRegisterRejectRequest\x1a\x18.\
    protos.StandardResponse\x12[\n\x12GetPipelineHistory\x12!.protos.GetPipe\
    lineHistoryRequest\x1a\".protos.GetPipelineHistoryResponse\x121\n\x04Tes\
    t\x12\x13.protos.TestRequest\x1a\x14.protos.TestResponseB-Z+github.com/s\
    treamdal/protos/build/go/protosJ\xd6J\n\x07\x12\x05\0\0\xcf\x02\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\t\n\
    \x02\x03\0\x12\x03\x04\0\x19\n\t\n\x02\x03\x01\x12\x03\x05\0\x17\n\t\n\
    \x02\x03\x02\x12\x03\x06\0\x19\n\t\n\x02\x03\x03\x12\x03\x07\0\x1b\n\x08\
    \n\x01\x08\x12\x03\t\0B\n\t\n\x02\x08\x0b\x12\x03\t\0B\n\n\n\x02\x06\0\
    \x12\x04\x0b\0a\x01\n\n\n\x03\x06\0\x01\x12\x03\x0b\x08\x10\n_\n\x04\x06\
    \0\x02\0\x12\x03\r\x025\x1aR\x20Should\x20return\x20everything\x20that\
    \x20is\x20needed\x20to\x20build\x20the\x20initial\x20view\x20in\x20the\
    \x20console\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\r\x06\x0c\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\r\r\x1a\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\r%3\
    \n:\n\x04\x06\0\x02\x01\x12\x03\x10\x02B\x1a-\x20Temporary\x20method\x20\
    to\x20test\x20gRPC-Web\x20streaming\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x10\x06\x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x10\x13\x20\n\x0c\
    \n\x05\x06\0\x02\x01\x06\x12\x03\x10+1\n\x0c\n\x05\x06\0\x02\x01\x03\x12\
    \x03\x102@\n@\n\x04\x06\0\x02\x02\x12\x03\x13\x02G\x1a3\x20Returns\x20pi\
    pelines\x20(_wasm_bytes\x20field\x20is\x20stripped)\n\n\x0c\n\x05\x06\0\
    \x02\x02\x01\x12\x03\x13\x06\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\
    \x13\x13&\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x131E\nH\n\x04\x06\0\x02\
    \x03\x12\x03\x16\x02D\x1a;\x20Returns\x20a\x20single\x20pipeline\x20(_wa\
    sm_bytes\x20field\x20is\x20stripped)\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\
    \x03\x16\x06\x11\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x16\x12$\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03\x16/B\nE\n\x04\x06\0\x02\x04\x12\x03\x19\
    \x02M\x1a8\x20Create\x20a\x20new\x20pipeline;\x20id\x20must\x20be\x20lef\
    t\x20empty\x20on\x20create\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x19\
    \x06\x14\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x19\x15*\n\x0c\n\x05\x06\
    \0\x02\x04\x03\x12\x03\x195K\n:\n\x04\x06\0\x02\x05\x12\x03\x1c\x02N\x1a\
    -\x20Update\x20an\x20existing\x20pipeline;\x20id\x20must\x20be\x20set\n\
    \n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\x1c\x06\x14\n\x0c\n\x05\x06\0\x02\
    \x05\x02\x12\x03\x1c\x15*\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03\x1c5L\n\
    \x20\n\x04\x06\0\x02\x06\x12\x03\x1f\x02N\x1a\x13\x20Delete\x20a\x20pipe\
    line\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03\x1f\x06\x14\n\x0c\n\x05\x06\
    \0\x02\x06\x02\x12\x03\x1f\x15*\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\
    \x1f5L\n/\n\x04\x06\0\x02\x07\x12\x03\"\x02N\x1a\"\x20Attach\x20a\x20pip\
    eline\x20to\x20an\x20audience\n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03\"\
    \x06\x14\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03\"\x15*\n\x0c\n\x05\x06\0\
    \x02\x07\x03\x12\x03\"5L\n1\n\x04\x06\0\x02\x08\x12\x03%\x02N\x1a$\x20De\
    tach\x20a\x20pipeline\x20from\x20an\x20audience\n\n\x0c\n\x05\x06\0\x02\
    \x08\x01\x12\x03%\x06\x14\n\x0c\n\x05\x06\0\x02\x08\x02\x12\x03%\x15*\n\
    \x0c\n\x05\x06\0\x02\x08\x03\x12\x03%5L\nC\n\x04\x06\0\x02\t\x12\x03(\
    \x02L\x1a6\x20Pause\x20a\x20pipeline;\x20noop\x20if\x20pipeline\x20is\
    \x20already\x20paused\n\n\x0c\n\x05\x06\0\x02\t\x01\x12\x03(\x06\x13\n\
    \x0c\n\x05\x06\0\x02\t\x02\x12\x03(\x14(\n\x0c\n\x05\x06\0\x02\t\x03\x12\
    \x03(3J\n@\n\x04\x06\0\x02\n\x12\x03+\x02N\x1a3\x20Resume\x20a\x20pipeli\
    ne;\x20noop\x20if\x20pipeline\x20is\x20not\x20paused\n\n\x0c\n\x05\x06\0\
    \x02\n\x01\x12\x03+\x06\x14\n\x0c\n\x05\x06\0\x02\n\x02\x12\x03+\x15*\n\
    \x0c\n\x05\x06\0\x02\n\x03\x12\x03+5L\n/\n\x04\x06\0\x02\x0b\x12\x03.\
    \x02V\x1a\"\x20Create\x20a\x20new\x20notification\x20config\n\n\x0c\n\
    \x05\x06\0\x02\x0b\x01\x12\x03.\x06\x18\n\x0c\n\x05\x06\0\x02\x0b\x02\
    \x12\x03.\x192\n\x0c\n\x05\x06\0\x02\x0b\x03\x12\x03.=T\n5\n\x04\x06\0\
    \x02\x0c\x12\x031\x02V\x1a(\x20Update\x20an\x20existing\x20notification\
    \x20config\n\n\x0c\n\x05\x06\0\x02\x0c\x01\x12\x031\x06\x18\n\x0c\n\x05\
    \x06\0\x02\x0c\x02\x12\x031\x192\n\x0c\n\x05\x06\0\x02\x0c\x03\x12\x031=\
    T\n+\n\x04\x06\0\x02\r\x12\x034\x02V\x1a\x1e\x20Delete\x20a\x20notificat\
    ion\x20config\n\n\x0c\n\x05\x06\0\x02\r\x01\x12\x034\x06\x18\n\x0c\n\x05\
    \x06\0\x02\r\x02\x12\x034\x192\n\x0c\n\x05\x06\0\x02\r\x03\x12\x034=T\n/\
    \n\x04\x06\0\x02\x0e\x12\x037\x02S\x1a\"\x20Returns\x20all\x20notificati\
    on\x20configs\n\n\x0c\n\x05\x06\0\x02\x0e\x01\x12\x037\x06\x16\n\x0c\n\
    \x05\x06\0\x02\x0e\x02\x12\x037\x17.\n\x0c\n\x05\x06\0\x02\x0e\x03\x12\
    \x0379Q\n3\n\x04\x06\0\x02\x0f\x12\x03:\x02P\x1a&\x20Returns\x20a\x20sin\
    gle\x20notification\x20config\n\n\x0c\n\x05\x06\0\x02\x0f\x01\x12\x03:\
    \x06\x15\n\x0c\n\x05\x06\0\x02\x0f\x02\x12\x03:\x16,\n\x0c\n\x05\x06\0\
    \x02\x0f\x03\x12\x03:7N\n9\n\x04\x06\0\x02\x10\x12\x03=\x02V\x1a,\x20Att\
    ach\x20a\x20notification\x20config\x20to\x20a\x20pipeline\n\n\x0c\n\x05\
    \x06\0\x02\x10\x01\x12\x03=\x06\x18\n\x0c\n\x05\x06\0\x02\x10\x02\x12\
    \x03=\x192\n\x0c\n\x05\x06\0\x02\x10\x03\x12\x03==T\n;\n\x04\x06\0\x02\
    \x11\x12\x03@\x02V\x1a.\x20Detach\x20a\x20notification\x20config\x20from\
    \x20a\x20pipeline\n\n\x0c\n\x05\x06\0\x02\x11\x01\x12\x03@\x06\x18\n\x0c\
    \n\x05\x06\0\x02\x11\x02\x12\x03@\x192\n\x0c\n\x05\x06\0\x02\x11\x03\x12\
    \x03@=T\n!\n\x04\x06\0\x02\x12\x12\x03C\x02N\x1a\x14\x20Delete\x20an\x20\
    audience\n\n\x0c\n\x05\x06\0\x02\x12\x01\x12\x03C\x06\x14\n\x0c\n\x05\
    \x06\0\x02\x12\x02\x12\x03C\x15*\n\x0c\n\x05\x06\0\x02\x12\x03\x12\x03C5\
    L\n<\n\x04\x06\0\x02\x13\x12\x03F\x02L\x1a/\x20Delete\x20a\x20service\
    \x20and\x20all\x20associated\x20audiences\n\n\x0c\n\x05\x06\0\x02\x13\
    \x01\x12\x03F\x06\x13\n\x0c\n\x05\x06\0\x02\x13\x02\x12\x03F\x14(\n\x0c\
    \n\x05\x06\0\x02\x13\x03\x12\x03F3J\n*\n\x04\x06\0\x02\x14\x12\x03I\x02H\
    \x1a\x1d\x20Returns\x20all\x20metric\x20counters\n\n\x0c\n\x05\x06\0\x02\
    \x14\x01\x12\x03I\x06\x10\n\x0c\n\x05\x06\0\x02\x14\x02\x12\x03I\x11\"\n\
    \x0c\n\x05\x06\0\x02\x14\x06\x12\x03I-3\n\x0c\n\x05\x06\0\x02\x14\x03\
    \x12\x03I4F\n\x0b\n\x04\x06\0\x02\x15\x12\x03K\x026\n\x0c\n\x05\x06\0\
    \x02\x15\x01\x12\x03K\x06\n\n\x0c\n\x05\x06\0\x02\x15\x02\x12\x03K\x0b\
    \x16\n\x0c\n\x05\x06\0\x02\x15\x06\x12\x03K!'\n\x0c\n\x05\x06\0\x02\x15\
    \x03\x12\x03K(4\n\x0b\n\x04\x06\0\x02\x16\x12\x03M\x02D\n\x0c\n\x05\x06\
    \0\x02\x16\x01\x12\x03M\x06\x0f\n\x0c\n\x05\x06\0\x02\x16\x02\x12\x03M\
    \x10\x20\n\x0c\n\x05\x06\0\x02\x16\x03\x12\x03M+B\n\x0b\n\x04\x06\0\x02\
    \x17\x12\x03O\x02F\n\x0c\n\x05\x06\0\x02\x17\x01\x12\x03O\x06\x10\n\x0c\
    \n\x05\x06\0\x02\x17\x02\x12\x03O\x11\"\n\x0c\n\x05\x06\0\x02\x17\x03\
    \x12\x03O-D\n\x0b\n\x04\x06\0\x02\x18\x12\x03Q\x02Z\n\x0c\n\x05\x06\0\
    \x02\x18\x01\x12\x03Q\x06\x16\n\x0c\n\x05\x06\0\x02\x18\x02\x12\x03Q\x17\
    .\n\x0c\n\x05\x06\0\x02\x18\x06\x12\x03Q9?\n\x0c\n\x05\x06\0\x02\x18\x03\
    \x12\x03Q@X\n\x0b\n\x04\x06\0\x02\x19\x12\x03S\x02>\n\x0c\n\x05\x06\0\
    \x02\x19\x01\x12\x03S\x06\x0f\n\x0c\n\x05\x06\0\x02\x19\x02\x12\x03S\x10\
    \x20\n\x0c\n\x05\x06\0\x02\x19\x03\x12\x03S+<\n\x0b\n\x04\x06\0\x02\x1a\
    \x12\x03U\x02b\n\x0c\n\x05\x06\0\x02\x1a\x01\x12\x03U\x06\x1b\n\x0c\n\
    \x05\x06\0\x02\x1a\x02\x12\x03U\x1c8\n\x0c\n\x05\x06\0\x02\x1a\x03\x12\
    \x03UC`\n\x0b\n\x04\x06\0\x02\x1b\x12\x03W\x02E\n\x0c\n\x05\x06\0\x02\
    \x1b\x01\x12\x03W\x06\x11\n\x0c\n\x05\x06\0\x02\x1b\x02\x12\x03W\x12(\n\
    \x0c\n\x05\x06\0\x02\x1b\x03\x12\x03W3C\n\x0b\n\x04\x06\0\x02\x1c\x12\
    \x03Y\x02U\n\x0c\n\x05\x06\0\x02\x1c\x01\x12\x03Y\x06\x1b\n\x0c\n\x05\
    \x06\0\x02\x1c\x02\x12\x03Y\x1c8\n\x0c\n\x05\x06\0\x02\x1c\x03\x12\x03YC\
    S\n\x0b\n\x04\x06\0\x02\x1d\x12\x03[\x02M\n\x0c\n\x05\x06\0\x02\x1d\x01\
    \x12\x03[\x06\x17\n\x0c\n\x05\x06\0\x02\x1d\x02\x12\x03[\x180\n\x0c\n\
    \x05\x06\0\x02\x1d\x03\x12\x03[;K\n\x0b\n\x04\x06\0\x02\x1e\x12\x03]\x02\
    Y\n\x0c\n\x05\x06\0\x02\x1e\x01\x12\x03]\x06\x18\n\x0c\n\x05\x06\0\x02\
    \x1e\x02\x12\x03]\x192\n\x0c\n\x05\x06\0\x02\x1e\x03\x12\x03]=W\n\x1a\n\
    \x04\x06\0\x02\x1f\x12\x03`\x02/\x1a\r\x20Test\x20method\n\n\x0c\n\x05\
    \x06\0\x02\x1f\x01\x12\x03`\x06\n\n\x0c\n\x05\x06\0\x02\x1f\x02\x12\x03`\
    \x0b\x16\n\x0c\n\x05\x06\0\x02\x1f\x03\x12\x03`!-\n=\n\x02\x04\0\x12\x04\
    c\0e\x01\"1\x20Don't\x20think\x20there\x20is\x20anything\x20to\x20pass\
    \x20in\x20(yet)?\n\n\n\n\x03\x04\0\x01\x12\x03c\x08\x15\n\n\n\x02\x04\
    \x01\x12\x04g\0}\x01\n\n\n\x03\x04\x01\x01\x12\x03g\x08\x16\n8\n\x04\x04\
    \x01\x02\0\x12\x03i\x02$\x1a+\x20Clients\x20currently\x20connected\x20to\
    \x20the\x20server\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03i\x02\n\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03i\x0b\x1a\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03i\x1b\x1f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03i\"#\n@\n\x04\x04\
    \x01\x02\x01\x12\x03l\x02)\x1a3\x20All\x20of\x20the\x20audiences\x20that\
    \x20are\x20known\x20to\x20the\x20server\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03l\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03l\x0b\x1a\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03l\x1b$\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03l'(\n\xbb\x01\n\x04\x04\x01\x02\x02\x12\x03q\x022\x1a\xad\
    \x01\x20All\x20of\x20the\x20pipelines\x20known\x20to\x20the\x20server\
    \x20+\x20pipeline\x20<->\x20audience\x20mappings\n\x20key\x20==\x20pipel\
    ine_id;\x20if\x20\"Audience\"\x20is\x20not\x20filled\x20out\x20-\x20pipe\
    line\x20is\x20not\x20attached\n\x20to\x20any\x20audience.\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x06\x12\x03q\x02#\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03q$-\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03q01\nh\n\x04\x04\x01\x02\
    \x03\x12\x03u\x023\x1a[\x20Audience\x20to\x20pipeline\x20ID\x20config/ma\
    pping.\n\x20key\x20==\x20$audience_as_string,\x20value\x20=\x20$pipeline\
    _id\n\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03u\x02'\n\x0c\n\x05\x04\x01\
    \x02\x03\x01\x12\x03u(.\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03u12\n\x85\
    \x01\n\x04\x04\x01\x02\x04\x12\x03y\x02*\x1ax\x20When\x20was\x20this\x20\
    response\x20generated.\x20This\x20is\x20useful\x20for\x20determining\x20\
    what\x20is\n\x20the\x20latest\x20update\x20when\x20using\x20GetAllStream\
    ().\n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03y\x02\x07\n\x0c\n\x05\x04\
    \x01\x02\x04\x01\x12\x03y\x08#\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03y&\
    )\n\x88\x01\n\x04\x04\x01\x02\x05\x12\x03|\x02\"\x1aD\x20Set\x20by\x20se\
    rver\x20to\x20indicate\x20that\x20the\x20response\x20is\x20a\x20keepaliv\
    e\x20message\n\"5\x20protolint:disable:this\x20FIELD_NAMES_LOWER_SNAKE_C\
    ASE\n\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03|\x02\n\n\x0c\n\x05\x04\x01\
    \x02\x05\x05\x12\x03|\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03|\
    \x10\x1a\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03|\x1d!\n\x0b\n\x02\x04\
    \x02\x12\x05\x7f\0\x82\x01\x01\n\n\n\x03\x04\x02\x01\x12\x03\x7f\x08\x1f\
    \nG\n\x04\x04\x02\x02\0\x12\x04\x81\x01\x02#\x1a9\x20List\x20of\x20pipel\
    ine\x20IDs\x20that\x20are\x20attached\x20to\x20this\x20audience\n\n\r\n\
    \x05\x04\x02\x02\0\x04\x12\x04\x81\x01\x02\n\n\r\n\x05\x04\x02\x02\0\x05\
    \x12\x04\x81\x01\x0b\x11\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x81\x01\x12\
    \x1e\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\x81\x01!\"\n1\n\x02\x04\x03\x12\
    \x06\x84\x01\0\x86\x01\x01\"#\x20Don't\x20think\x20we\x20need\x20anythin\
    g\x20here\n\n\x0b\n\x03\x04\x03\x01\x12\x04\x84\x01\x08\x1b\n\x0c\n\x02\
    \x04\x04\x12\x06\x88\x01\0\x8a\x01\x01\n\x0b\n\x03\x04\x04\x01\x12\x04\
    \x88\x01\x08\x1c\n\x0c\n\x04\x04\x04\x02\0\x12\x04\x89\x01\x02)\n\r\n\
    \x05\x04\x04\x02\0\x04\x12\x04\x89\x01\x02\n\n\r\n\x05\x04\x04\x02\0\x06\
    \x12\x04\x89\x01\x0b\x1a\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\x89\x01\x1b\
    $\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x89\x01'(\n\x0c\n\x02\x04\x05\x12\
    \x06\x8c\x01\0\x8e\x01\x01\n\x0b\n\x03\x04\x05\x01\x12\x04\x8c\x01\x08\
    \x1a\n\x0c\n\x04\x04\x05\x02\0\x12\x04\x8d\x01\x02\x19\n\r\n\x05\x04\x05\
    \x02\0\x05\x12\x04\x8d\x01\x02\x08\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\
    \x8d\x01\t\x14\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x8d\x01\x17\x18\n\x0c\
    \n\x02\x04\x06\x12\x06\x90\x01\0\x92\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\
    \x04\x90\x01\x08\x1b\n\x0c\n\x04\x04\x06\x02\0\x12\x04\x91\x01\x02\x1f\n\
    \r\n\x05\x04\x06\x02\0\x06\x12\x04\x91\x01\x02\x11\n\r\n\x05\x04\x06\x02\
    \0\x01\x12\x04\x91\x01\x12\x1a\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x91\
    \x01\x1d\x1e\n\x0c\n\x02\x04\x07\x12\x06\x94\x01\0\x96\x01\x01\n\x0b\n\
    \x03\x04\x07\x01\x12\x04\x94\x01\x08\x1d\n\x0c\n\x04\x04\x07\x02\0\x12\
    \x04\x95\x01\x02\x1f\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\x95\x01\x02\x11\
    \n\r\n\x05\x04\x07\x02\0\x01\x12\x04\x95\x01\x12\x1a\n\r\n\x05\x04\x07\
    \x02\0\x03\x12\x04\x95\x01\x1d\x1e\n\x0c\n\x02\x04\x08\x12\x06\x98\x01\0\
    \x9b\x01\x01\n\x0b\n\x03\x04\x08\x01\x12\x04\x98\x01\x08\x1e\n\x0c\n\x04\
    \x04\x08\x02\0\x12\x04\x99\x01\x02\x15\n\r\n\x05\x04\x08\x02\0\x05\x12\
    \x04\x99\x01\x02\x08\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\x99\x01\t\x10\n\
    \r\n\x05\x04\x08\x02\0\x03\x12\x04\x99\x01\x13\x14\n\x0c\n\x04\x04\x08\
    \x02\x01\x12\x04\x9a\x01\x02\x19\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\
    \x9a\x01\x02\x08\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\x9a\x01\t\x14\n\r\
    \n\x05\x04\x08\x02\x01\x03\x12\x04\x9a\x01\x17\x18\n\x0c\n\x02\x04\t\x12\
    \x06\x9d\x01\0\x9f\x01\x01\n\x0b\n\x03\x04\t\x01\x12\x04\x9d\x01\x08\x1d\
    \n\x0c\n\x04\x04\t\x02\0\x12\x04\x9e\x01\x02\x1f\n\r\n\x05\x04\t\x02\0\
    \x06\x12\x04\x9e\x01\x02\x11\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x9e\x01\
    \x12\x1a\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x9e\x01\x1d\x1e\n\x0c\n\x02\
    \x04\n\x12\x06\xa1\x01\0\xa3\x01\x01\n\x0b\n\x03\x04\n\x01\x12\x04\xa1\
    \x01\x08\x1d\n\x0c\n\x04\x04\n\x02\0\x12\x04\xa2\x01\x02\x19\n\r\n\x05\
    \x04\n\x02\0\x05\x12\x04\xa2\x01\x02\x08\n\r\n\x05\x04\n\x02\0\x01\x12\
    \x04\xa2\x01\t\x14\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xa2\x01\x17\x18\n\
    \x0c\n\x02\x04\x0b\x12\x06\xa5\x01\0\xa8\x01\x01\n\x0b\n\x03\x04\x0b\x01\
    \x12\x04\xa5\x01\x08\x1d\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\xa6\x01\x02\
    \x19\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xa6\x01\x02\x08\n\r\n\x05\x04\
    \x0b\x02\0\x01\x12\x04\xa6\x01\t\x14\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\
    \xa6\x01\x17\x18\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\xa7\x01\x02\x1f\n\r\
    \n\x05\x04\x0b\x02\x01\x06\x12\x04\xa7\x01\x02\x11\n\r\n\x05\x04\x0b\x02\
    \x01\x01\x12\x04\xa7\x01\x12\x1a\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\
    \xa7\x01\x1d\x1e\n\x0c\n\x02\x04\x0c\x12\x06\xaa\x01\0\xb1\x01\x01\n\x0b\
    \n\x03\x04\x0c\x01\x12\x04\xaa\x01\x08\x1d\n\x0c\n\x04\x04\x0c\x02\0\x12\
    \x04\xab\x01\x02\x19\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xab\x01\x02\x08\
    \n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xab\x01\t\x14\n\r\n\x05\x04\x0c\x02\
    \0\x03\x12\x04\xab\x01\x17\x18\n\x0c\n\x04\x04\x0c\x02\x01\x12\x04\xac\
    \x01\x02\x1f\n\r\n\x05\x04\x0c\x02\x01\x06\x12\x04\xac\x01\x02\x11\n\r\n\
    \x05\x04\x0c\x02\x01\x01\x12\x04\xac\x01\x12\x1a\n\r\n\x05\x04\x0c\x02\
    \x01\x03\x12\x04\xac\x01\x1d\x1e\n\xab\x01\n\x04\x04\x0c\x02\x02\x12\x04\
    \xb0\x01\x02#\x1af\x20Filled\x20out\x20by\x20detach\x20gRPC\x20handler\
    \x20so\x20that\x20broadcast\x20handlers\x20can\x20avoid\n\x20performing\
    \x20a\x20lookup\x20in\x20NATS.\n\"5\x20protolint:disable:this\x20FIELD_N\
    AMES_LOWER_SNAKE_CASE\n\n\r\n\x05\x04\x0c\x02\x02\x04\x12\x04\xb0\x01\
    \x02\n\n\r\n\x05\x04\x0c\x02\x02\x05\x12\x04\xb0\x01\x0b\x11\n\r\n\x05\
    \x04\x0c\x02\x02\x01\x12\x04\xb0\x01\x12\x1e\n\r\n\x05\x04\x0c\x02\x02\
    \x03\x12\x04\xb0\x01!\"\n\x0c\n\x02\x04\r\x12\x06\xb3\x01\0\xb6\x01\x01\
    \n\x0b\n\x03\x04\r\x01\x12\x04\xb3\x01\x08\x1c\n\x0c\n\x04\x04\r\x02\0\
    \x12\x04\xb4\x01\x02\x19\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xb4\x01\x02\
    \x08\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xb4\x01\t\x14\n\r\n\x05\x04\r\x02\
    \0\x03\x12\x04\xb4\x01\x17\x18\n\x0c\n\x04\x04\r\x02\x01\x12\x04\xb5\x01\
    \x02\x1f\n\r\n\x05\x04\r\x02\x01\x06\x12\x04\xb5\x01\x02\x11\n\r\n\x05\
    \x04\r\x02\x01\x01\x12\x04\xb5\x01\x12\x1a\n\r\n\x05\x04\r\x02\x01\x03\
    \x12\x04\xb5\x01\x1d\x1e\n\x0c\n\x02\x04\x0e\x12\x06\xb8\x01\0\xbb\x01\
    \x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\xb8\x01\x08\x1d\n\x0c\n\x04\x04\x0e\
    \x02\0\x12\x04\xb9\x01\x02\x19\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\xb9\
    \x01\x02\x08\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xb9\x01\t\x14\n\r\n\x05\
    \x04\x0e\x02\0\x03\x12\x04\xb9\x01\x17\x18\n\x0c\n\x04\x04\x0e\x02\x01\
    \x12\x04\xba\x01\x02\x1f\n\r\n\x05\x04\x0e\x02\x01\x06\x12\x04\xba\x01\
    \x02\x11\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\xba\x01\x12\x1a\n\r\n\x05\
    \x04\x0e\x02\x01\x03\x12\x04\xba\x01\x1d\x1e\n\x1d\n\x02\x04\x0f\x12\x06\
    \xbe\x01\0\xc0\x01\x01\x1a\x0f\x20Notifications\n\n\x0b\n\x03\x04\x0f\
    \x01\x12\x04\xbe\x01\x08!\n\x0c\n\x04\x04\x0f\x02\0\x12\x04\xbf\x01\x02-\
    \n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\xbf\x01\x02\x1b\n\r\n\x05\x04\x0f\
    \x02\0\x01\x12\x04\xbf\x01\x1c(\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xbf\
    \x01+,\n\x0c\n\x02\x04\x10\x12\x06\xc2\x01\0\xc4\x01\x01\n\x0b\n\x03\x04\
    \x10\x01\x12\x04\xc2\x01\x08!\n\x0c\n\x04\x04\x10\x02\0\x12\x04\xc3\x01\
    \x02-\n\r\n\x05\x04\x10\x02\0\x06\x12\x04\xc3\x01\x02\x1b\n\r\n\x05\x04\
    \x10\x02\0\x01\x12\x04\xc3\x01\x1c(\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\
    \xc3\x01+,\n\x0c\n\x02\x04\x11\x12\x06\xc6\x01\0\xc8\x01\x01\n\x0b\n\x03\
    \x04\x11\x01\x12\x04\xc6\x01\x08!\n\x0c\n\x04\x04\x11\x02\0\x12\x04\xc7\
    \x01\x02\x1d\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\xc7\x01\x02\x08\n\r\n\
    \x05\x04\x11\x02\0\x01\x12\x04\xc7\x01\t\x18\n\r\n\x05\x04\x11\x02\0\x03\
    \x12\x04\xc7\x01\x1b\x1c\n1\n\x02\x04\x12\x12\x06\xca\x01\0\xcc\x01\x01\
    \"#\x20Don't\x20think\x20we\x20need\x20anything\x20here\n\n\x0b\n\x03\
    \x04\x12\x01\x12\x04\xca\x01\x08\x1f\n\x0c\n\x02\x04\x13\x12\x06\xce\x01\
    \0\xd1\x01\x01\n\x0b\n\x03\x04\x13\x01\x12\x04\xce\x01\x08\x20\n4\n\x04\
    \x04\x13\x02\0\x12\x04\xd0\x01\x02:\x1a&\x20Key\x20==\x20id\x20of\x20the\
    \x20notification\x20config\n\n\r\n\x05\x04\x13\x02\0\x06\x12\x04\xd0\x01\
    \x02'\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\xd0\x01(5\n\r\n\x05\x04\x13\
    \x02\0\x03\x12\x04\xd0\x0189\n\x0c\n\x02\x04\x14\x12\x06\xd3\x01\0\xd5\
    \x01\x01\n\x0b\n\x03\x04\x14\x01\x12\x04\xd3\x01\x08\x1e\n\x0c\n\x04\x04\
    \x14\x02\0\x12\x04\xd4\x01\x02\x1d\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\
    \xd4\x01\x02\x08\n\r\n\x05\x04\x14\x02\0\x01\x12\x04\xd4\x01\t\x18\n\r\n\
    \x05\x04\x14\x02\0\x03\x12\x04\xd4\x01\x1b\x1c\n\x0c\n\x02\x04\x15\x12\
    \x06\xd7\x01\0\xd9\x01\x01\n\x0b\n\x03\x04\x15\x01\x12\x04\xd7\x01\x08\
    \x1f\n\x0c\n\x04\x04\x15\x02\0\x12\x04\xd8\x01\x02-\n\r\n\x05\x04\x15\
    \x02\0\x06\x12\x04\xd8\x01\x02\x1b\n\r\n\x05\x04\x15\x02\0\x01\x12\x04\
    \xd8\x01\x1c(\n\r\n\x05\x04\x15\x02\0\x03\x12\x04\xd8\x01+,\n\x0c\n\x02\
    \x04\x16\x12\x06\xdb\x01\0\xde\x01\x01\n\x0b\n\x03\x04\x16\x01\x12\x04\
    \xdb\x01\x08!\n\x0c\n\x04\x04\x16\x02\0\x12\x04\xdc\x01\x02\x1d\n\r\n\
    \x05\x04\x16\x02\0\x05\x12\x04\xdc\x01\x02\x08\n\r\n\x05\x04\x16\x02\0\
    \x01\x12\x04\xdc\x01\t\x18\n\r\n\x05\x04\x16\x02\0\x03\x12\x04\xdc\x01\
    \x1b\x1c\n\x0c\n\x04\x04\x16\x02\x01\x12\x04\xdd\x01\x02\x19\n\r\n\x05\
    \x04\x16\x02\x01\x05\x12\x04\xdd\x01\x02\x08\n\r\n\x05\x04\x16\x02\x01\
    \x01\x12\x04\xdd\x01\t\x14\n\r\n\x05\x04\x16\x02\x01\x03\x12\x04\xdd\x01\
    \x17\x18\n\x0c\n\x02\x04\x17\x12\x06\xe0\x01\0\xe3\x01\x01\n\x0b\n\x03\
    \x04\x17\x01\x12\x04\xe0\x01\x08!\n\x0c\n\x04\x04\x17\x02\0\x12\x04\xe1\
    \x01\x02\x1d\n\r\n\x05\x04\x17\x02\0\x05\x12\x04\xe1\x01\x02\x08\n\r\n\
    \x05\x04\x17\x02\0\x01\x12\x04\xe1\x01\t\x18\n\r\n\x05\x04\x17\x02\0\x03\
    \x12\x04\xe1\x01\x1b\x1c\n\x0c\n\x04\x04\x17\x02\x01\x12\x04\xe2\x01\x02\
    \x19\n\r\n\x05\x04\x17\x02\x01\x05\x12\x04\xe2\x01\x02\x08\n\r\n\x05\x04\
    \x17\x02\x01\x01\x12\x04\xe2\x01\t\x14\n\r\n\x05\x04\x17\x02\x01\x03\x12\
    \x04\xe2\x01\x17\x18\n\x0c\n\x02\x04\x18\x12\x06\xe5\x01\0\xea\x01\x01\n\
    \x0b\n\x03\x04\x18\x01\x12\x04\xe5\x01\x08\x1d\n\x0c\n\x04\x04\x18\x02\0\
    \x12\x04\xe6\x01\x02\x1f\n\r\n\x05\x04\x18\x02\0\x06\x12\x04\xe6\x01\x02\
    \x11\n\r\n\x05\x04\x18\x02\0\x01\x12\x04\xe6\x01\x12\x1a\n\r\n\x05\x04\
    \x18\x02\0\x03\x12\x04\xe6\x01\x1d\x1e\nY\n\x04\x04\x18\x02\x01\x12\x04\
    \xe9\x01\x02\x1a\x1aK\x20If\x20true,\x20will\x20also\x20detach\x20all\
    \x20pipelines\x20from\x20the\x20audience\x20(if\x20it\x20has\x20any)\n\n\
    \r\n\x05\x04\x18\x02\x01\x04\x12\x04\xe9\x01\x02\n\n\r\n\x05\x04\x18\x02\
    \x01\x05\x12\x04\xe9\x01\x0b\x0f\n\r\n\x05\x04\x18\x02\x01\x01\x12\x04\
    \xe9\x01\x10\x15\n\r\n\x05\x04\x18\x02\x01\x03\x12\x04\xe9\x01\x18\x19\n\
    \x0c\n\x02\x04\x19\x12\x06\xec\x01\0\xf0\x01\x01\n\x0b\n\x03\x04\x19\x01\
    \x12\x04\xec\x01\x08\x1c\n\x0c\n\x04\x04\x19\x02\0\x12\x04\xed\x01\x02\
    \x1a\n\r\n\x05\x04\x19\x02\0\x05\x12\x04\xed\x01\x02\x08\n\r\n\x05\x04\
    \x19\x02\0\x01\x12\x04\xed\x01\t\x15\n\r\n\x05\x04\x19\x02\0\x03\x12\x04\
    \xed\x01\x18\x19\n\x0c\n\x04\x04\x19\x02\x01\x12\x04\xef\x01\x02\x1a\n\r\
    \n\x05\x04\x19\x02\x01\x04\x12\x04\xef\x01\x02\n\n\r\n\x05\x04\x19\x02\
    \x01\x05\x12\x04\xef\x01\x0b\x0f\n\r\n\x05\x04\x19\x02\x01\x01\x12\x04\
    \xef\x01\x10\x15\n\r\n\x05\x04\x19\x02\x01\x03\x12\x04\xef\x01\x18\x19\n\
    D\n\x02\x04\x1a\x12\x06\xf2\x01\0\xf4\x01\x01\"6\x20Nothing\x20needed\
    \x20here,\x20we\x20return\x20all\x20metrics\x20currently\n\n\x0b\n\x03\
    \x04\x1a\x01\x12\x04\xf2\x01\x08\x19\n\x0c\n\x02\x04\x1b\x12\x06\xf6\x01\
    \0\xfb\x01\x01\n\x0b\n\x03\x04\x1b\x01\x12\x04\xf6\x01\x08\x1a\n\x0c\n\
    \x04\x04\x1b\x02\0\x12\x04\xf7\x01\x02(\n\r\n\x05\x04\x1b\x02\0\x06\x12\
    \x04\xf7\x01\x02\x1b\n\r\n\x05\x04\x1b\x02\0\x01\x12\x04\xf7\x01\x1c#\n\
    \r\n\x05\x04\x1b\x02\0\x03\x12\x04\xf7\x01&'\n\x89\x01\n\x04\x04\x1b\x02\
    \x01\x12\x04\xfa\x01\x02\"\x1aD\x20Set\x20by\x20server\x20to\x20indicate\
    \x20that\x20the\x20response\x20is\x20a\x20keepalive\x20message\n\"5\x20p\
    rotolint:disable:this\x20FIELD_NAMES_LOWER_SNAKE_CASE\n\n\r\n\x05\x04\
    \x1b\x02\x01\x04\x12\x04\xfa\x01\x02\n\n\r\n\x05\x04\x1b\x02\x01\x05\x12\
    \x04\xfa\x01\x0b\x0f\n\r\n\x05\x04\x1b\x02\x01\x01\x12\x04\xfa\x01\x10\
    \x1a\n\r\n\x05\x04\x1b\x02\x01\x03\x12\x04\xfa\x01\x1d!\n8\n\x02\x04\x1c\
    \x12\x06\xfd\x01\0\xff\x01\x01\"*\x20Nothing\x20needed\x20here,\x20we\
    \x20return\x20all\x20rates\n\n\x0b\n\x03\x04\x1c\x01\x12\x04\xfd\x01\x08\
    \x1f\n\x0c\n\x02\x04\x1d\x12\x06\x81\x02\0\x86\x02\x01\n\x0b\n\x03\x04\
    \x1d\x01\x12\x04\x81\x02\x08\x20\n)\n\x04\x04\x1d\x02\0\x12\x04\x82\x02\
    \x02%\"\x1b\x20Key\x20is\x20an\x20audience\x20string\n\n\r\n\x05\x04\x1d\
    \x02\0\x06\x12\x04\x82\x02\x02\x1a\n\r\n\x05\x04\x1d\x02\0\x01\x12\x04\
    \x82\x02\x1b\x20\n\r\n\x05\x04\x1d\x02\0\x03\x12\x04\x82\x02#$\n\x89\x01\
    \n\x04\x04\x1d\x02\x01\x12\x04\x85\x02\x02\"\x1aD\x20Set\x20by\x20server\
    \x20to\x20indicate\x20that\x20the\x20response\x20is\x20a\x20keepalive\
    \x20message\n\"5\x20protolint:disable:this\x20FIELD_NAMES_LOWER_SNAKE_CA\
    SE\n\n\r\n\x05\x04\x1d\x02\x01\x04\x12\x04\x85\x02\x02\n\n\r\n\x05\x04\
    \x1d\x02\x01\x05\x12\x04\x85\x02\x0b\x0f\n\r\n\x05\x04\x1d\x02\x01\x01\
    \x12\x04\x85\x02\x10\x1a\n\r\n\x05\x04\x1d\x02\x01\x03\x12\x04\x85\x02\
    \x1d!\n\x0c\n\x02\x04\x1e\x12\x06\x88\x02\0\x8a\x02\x01\n\x0b\n\x03\x04\
    \x1e\x01\x12\x04\x88\x02\x08\x18\n\x0c\n\x04\x04\x1e\x02\0\x12\x04\x89\
    \x02\x02\x1f\n\r\n\x05\x04\x1e\x02\0\x06\x12\x04\x89\x02\x02\x11\n\r\n\
    \x05\x04\x1e\x02\0\x01\x12\x04\x89\x02\x12\x1a\n\r\n\x05\x04\x1e\x02\0\
    \x03\x12\x04\x89\x02\x1d\x1e\n\x0c\n\x02\x04\x1f\x12\x06\x8c\x02\0\x8e\
    \x02\x01\n\x0b\n\x03\x04\x1f\x01\x12\x04\x8c\x02\x08\x19\n\x0c\n\x04\x04\
    \x1f\x02\0\x12\x04\x8d\x02\x02\x14\n\r\n\x05\x04\x1f\x02\0\x06\x12\x04\
    \x8d\x02\x02\x08\n\r\n\x05\x04\x1f\x02\0\x01\x12\x04\x8d\x02\t\x0f\n\r\n\
    \x05\x04\x1f\x02\0\x03\x12\x04\x8d\x02\x12\x13\n\x0c\n\x02\x04\x20\x12\
    \x06\x90\x02\0\x92\x02\x01\n\x0b\n\x03\x04\x20\x01\x12\x04\x90\x02\x08$\
    \n\x0c\n\x04\x04\x20\x02\0\x12\x04\x91\x02\x02\x13\n\r\n\x05\x04\x20\x02\
    \0\x05\x12\x04\x91\x02\x02\x08\n\r\n\x05\x04\x20\x02\0\x01\x12\x04\x91\
    \x02\t\x0e\n\r\n\x05\x04\x20\x02\0\x03\x12\x04\x91\x02\x11\x12\n\x0c\n\
    \x02\x04!\x12\x06\x94\x02\0\xa3\x02\x01\n\x0b\n\x03\x04!\x01\x12\x04\x94\
    \x02\x08%\n\x0e\n\x04\x04!\x04\0\x12\x06\x95\x02\x02\xa0\x02\x03\n\r\n\
    \x05\x04!\x04\0\x01\x12\x04\x95\x02\x07\r\n\x0e\n\x06\x04!\x04\0\x02\0\
    \x12\x04\x96\x02\x04\x15\n\x0f\n\x07\x04!\x04\0\x02\0\x01\x12\x04\x96\
    \x02\x04\x10\n\x0f\n\x07\x04!\x04\0\x02\0\x02\x12\x04\x96\x02\x13\x14\n=\
    \n\x06\x04!\x04\0\x02\x01\x12\x04\x99\x02\x04\x16\x1a-\x20Submit\x20mean\
    s\x20the\x20user\x20is\x20not\x20registered\x20yet\n\n\x0f\n\x07\x04!\
    \x04\0\x02\x01\x01\x12\x04\x99\x02\x04\x11\n\x0f\n\x07\x04!\x04\0\x02\
    \x01\x02\x12\x04\x99\x02\x14\x15\nJ\n\x06\x04!\x04\0\x02\x02\x12\x04\x9c\
    \x02\x04\x16\x1a:\x20Verify\x20means\x20the\x20user\x20is\x20registered\
    \x20but\x20not\x20verified\x20yet\n\n\x0f\n\x07\x04!\x04\0\x02\x02\x01\
    \x12\x04\x9c\x02\x04\x11\n\x0f\n\x07\x04!\x04\0\x02\x02\x02\x12\x04\x9c\
    \x02\x14\x15\n@\n\x06\x04!\x04\0\x02\x03\x12\x04\x9f\x02\x04\x14\x1a0\
    \x20Done\x20means\x20the\x20user\x20is\x20registered\x20and\x20verified\
    \n\n\x0f\n\x07\x04!\x04\0\x02\x03\x01\x12\x04\x9f\x02\x04\x0f\n\x0f\n\
    \x07\x04!\x04\0\x02\x03\x02\x12\x04\x9f\x02\x12\x13\n\x0c\n\x04\x04!\x02\
    \0\x12\x04\xa2\x02\x02\x14\n\r\n\x05\x04!\x02\0\x06\x12\x04\xa2\x02\x02\
    \x08\n\r\n\x05\x04!\x02\0\x01\x12\x04\xa2\x02\t\x0f\n\r\n\x05\x04!\x02\0\
    \x03\x12\x04\xa2\x02\x12\x13\n\x0c\n\x02\x04\"\x12\x06\xa5\x02\0\xac\x02\
    \x01\n\x0b\n\x03\x04\"\x01\x12\x04\xa5\x02\x08\x1e\n\x0c\n\x04\x04\"\x02\
    \0\x12\x04\xa6\x02\x02\x13\n\r\n\x05\x04\"\x02\0\x05\x12\x04\xa6\x02\x02\
    \x08\n\r\n\x05\x04\"\x02\0\x01\x12\x04\xa6\x02\t\x0e\n\r\n\x05\x04\"\x02\
    \0\x03\x12\x04\xa6\x02\x11\x12\n\x0c\n\x04\x04\"\x02\x01\x12\x04\xa8\x02\
    \x02\x18\n\r\n\x05\x04\"\x02\x01\x05\x12\x04\xa8\x02\x02\x08\n\r\n\x05\
    \x04\"\x02\x01\x01\x12\x04\xa8\x02\t\x13\n\r\n\x05\x04\"\x02\x01\x03\x12\
    \x04\xa8\x02\x16\x17\ni\n\x04\x04\"\x02\x02\x12\x04\xab\x02\x02\x15\x1a$\
    \x20Used\x20for\x20storage\x20on\x20ui-bff\x20backend\n\"5\x20protolint:\
    disable:this\x20FIELD_NAMES_LOWER_SNAKE_CASE\n\n\r\n\x05\x04\"\x02\x02\
    \x05\x12\x04\xab\x02\x02\x08\n\r\n\x05\x04\"\x02\x02\x01\x12\x04\xab\x02\
    \t\x0e\n\r\n\x05\x04\"\x02\x02\x03\x12\x04\xab\x02\x11\x14\n\x0c\n\x02\
    \x04#\x12\x06\xae\x02\0\xb2\x02\x01\n\x0b\n\x03\x04#\x01\x12\x04\xae\x02\
    \x08$\n\x0c\n\x04\x04#\x02\0\x12\x04\xaf\x02\x02\x13\n\r\n\x05\x04#\x02\
    \0\x05\x12\x04\xaf\x02\x02\x08\n\r\n\x05\x04#\x02\0\x01\x12\x04\xaf\x02\
    \t\x0e\n\r\n\x05\x04#\x02\0\x03\x12\x04\xaf\x02\x11\x12\n\x0c\n\x04\x04#\
    \x02\x01\x12\x04\xb1\x02\x02\x12\n\r\n\x05\x04#\x02\x01\x05\x12\x04\xb1\
    \x02\x02\x08\n\r\n\x05\x04#\x02\x01\x01\x12\x04\xb1\x02\t\r\n\r\n\x05\
    \x04#\x02\x01\x03\x12\x04\xb1\x02\x10\x11\n\x0c\n\x02\x04$\x12\x06\xb4\
    \x02\0\xb6\x02\x01\n\x0b\n\x03\x04$\x01\x12\x04\xb4\x02\x08\x20\n\x0c\n\
    \x04\x04$\x02\0\x12\x04\xb5\x02\x02\x18\n\r\n\x05\x04$\x02\0\x05\x12\x04\
    \xb5\x02\x02\x08\n\r\n\x05\x04$\x02\0\x01\x12\x04\xb5\x02\t\x13\n\r\n\
    \x05\x04$\x02\0\x03\x12\x04\xb5\x02\x16\x17\n\x0c\n\x02\x04%\x12\x06\xb8\
    \x02\0\xba\x02\x01\n\x0b\n\x03\x04%\x01\x12\x04\xb8\x02\x08\x18\n\x0c\n\
    \x04\x04%\x02\0\x12\x04\xb9\x02\x02\x15\n\r\n\x05\x04%\x02\0\x05\x12\x04\
    \xb9\x02\x02\x08\n\r\n\x05\x04%\x02\0\x01\x12\x04\xb9\x02\t\x10\n\r\n\
    \x05\x04%\x02\0\x03\x12\x04\xb9\x02\x13\x14\n\x0c\n\x02\x04&\x12\x06\xbc\
    \x02\0\xbe\x02\x01\n\x0b\n\x03\x04&\x01\x12\x04\xbc\x02\x08\x19\n\x0c\n\
    \x04\x04&\x02\0\x12\x04\xbd\x02\x02\x15\n\r\n\x05\x04&\x02\0\x05\x12\x04\
    \xbd\x02\x02\x08\n\r\n\x05\x04&\x02\0\x01\x12\x04\xbd\x02\t\x10\n\r\n\
    \x05\x04&\x02\0\x03\x12\x04\xbd\x02\x13\x14\n\x0c\n\x02\x04'\x12\x06\xc0\
    \x02\0\xc2\x02\x01\n\x0b\n\x03\x04'\x01\x12\x04\xc0\x02\x08!\n\x0c\n\x04\
    \x04'\x02\0\x12\x04\xc1\x02\x02\x19\n\r\n\x05\x04'\x02\0\x05\x12\x04\xc1\
    \x02\x02\x08\n\r\n\x05\x04'\x02\0\x01\x12\x04\xc1\x02\t\x14\n\r\n\x05\
    \x04'\x02\0\x03\x12\x04\xc1\x02\x17\x18\n\x0c\n\x02\x04(\x12\x06\xc4\x02\
    \0\xc7\x02\x01\n\x0b\n\x03\x04(\x01\x12\x04\xc4\x02\x08\"\n\x1e\n\x04\
    \x04(\x02\0\x12\x04\xc6\x02\x02*\x1a\x10\x20Key\x20==\x20version\n\n\r\n\
    \x05\x04(\x02\0\x06\x12\x04\xc6\x02\x02\x1d\n\r\n\x05\x04(\x02\0\x01\x12\
    \x04\xc6\x02\x1e%\n\r\n\x05\x04(\x02\0\x03\x12\x04\xc6\x02()\n\x0c\n\x02\
    \x04)\x12\x06\xc9\x02\0\xcb\x02\x01\n\x0b\n\x03\x04)\x01\x12\x04\xc9\x02\
    \x08\x13\n\x0c\n\x04\x04)\x02\0\x12\x04\xca\x02\x02\x13\n\r\n\x05\x04)\
    \x02\0\x05\x12\x04\xca\x02\x02\x08\n\r\n\x05\x04)\x02\0\x01\x12\x04\xca\
    \x02\t\x0e\n\r\n\x05\x04)\x02\0\x03\x12\x04\xca\x02\x11\x12\n\x0c\n\x02\
    \x04*\x12\x06\xcd\x02\0\xcf\x02\x01\n\x0b\n\x03\x04*\x01\x12\x04\xcd\x02\
    \x08\x14\n\x0c\n\x04\x04*\x02\0\x12\x04\xce\x02\x02\x14\n\r\n\x05\x04*\
    \x02\0\x05\x12\x04\xce\x02\x02\x08\n\r\n\x05\x04*\x02\0\x01\x12\x04\xce\
    \x02\t\x0f\n\r\n\x05\x04*\x02\0\x03\x12\x04\xce\x02\x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(4);
            deps.push(super::sp_common::file_descriptor().clone());
            deps.push(super::sp_info::file_descriptor().clone());
            deps.push(super::sp_notify::file_descriptor().clone());
            deps.push(super::sp_pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(43);
            messages.push(GetAllRequest::generated_message_descriptor_data());
            messages.push(GetAllResponse::generated_message_descriptor_data());
            messages.push(GetAllResponsePipelines::generated_message_descriptor_data());
            messages.push(GetPipelinesRequest::generated_message_descriptor_data());
            messages.push(GetPipelinesResponse::generated_message_descriptor_data());
            messages.push(GetPipelineRequest::generated_message_descriptor_data());
            messages.push(GetPipelineResponse::generated_message_descriptor_data());
            messages.push(CreatePipelineRequest::generated_message_descriptor_data());
            messages.push(CreatePipelineResponse::generated_message_descriptor_data());
            messages.push(UpdatePipelineRequest::generated_message_descriptor_data());
            messages.push(DeletePipelineRequest::generated_message_descriptor_data());
            messages.push(AttachPipelineRequest::generated_message_descriptor_data());
            messages.push(DetachPipelineRequest::generated_message_descriptor_data());
            messages.push(PausePipelineRequest::generated_message_descriptor_data());
            messages.push(ResumePipelineRequest::generated_message_descriptor_data());
            messages.push(CreateNotificationRequest::generated_message_descriptor_data());
            messages.push(UpdateNotificationRequest::generated_message_descriptor_data());
            messages.push(DeleteNotificationRequest::generated_message_descriptor_data());
            messages.push(GetNotificationsRequest::generated_message_descriptor_data());
            messages.push(GetNotificationsResponse::generated_message_descriptor_data());
            messages.push(GetNotificationRequest::generated_message_descriptor_data());
            messages.push(GetNotificationResponse::generated_message_descriptor_data());
            messages.push(AttachNotificationRequest::generated_message_descriptor_data());
            messages.push(DetachNotificationRequest::generated_message_descriptor_data());
            messages.push(DeleteAudienceRequest::generated_message_descriptor_data());
            messages.push(DeleteServiceRequest::generated_message_descriptor_data());
            messages.push(GetMetricsRequest::generated_message_descriptor_data());
            messages.push(GetMetricsResponse::generated_message_descriptor_data());
            messages.push(GetAudienceRatesRequest::generated_message_descriptor_data());
            messages.push(GetAudienceRatesResponse::generated_message_descriptor_data());
            messages.push(GetSchemaRequest::generated_message_descriptor_data());
            messages.push(GetSchemaResponse::generated_message_descriptor_data());
            messages.push(AppRegistrationStatusRequest::generated_message_descriptor_data());
            messages.push(AppRegistrationStatusResponse::generated_message_descriptor_data());
            messages.push(AppRegistrationRequest::generated_message_descriptor_data());
            messages.push(AppVerifyRegistrationRequest::generated_message_descriptor_data());
            messages.push(AppRegisterRejectRequest::generated_message_descriptor_data());
            messages.push(PauseTailRequest::generated_message_descriptor_data());
            messages.push(ResumeTailRequest::generated_message_descriptor_data());
            messages.push(GetPipelineHistoryRequest::generated_message_descriptor_data());
            messages.push(GetPipelineHistoryResponse::generated_message_descriptor_data());
            messages.push(TestRequest::generated_message_descriptor_data());
            messages.push(TestResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(app_registration_status_response::Status::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
