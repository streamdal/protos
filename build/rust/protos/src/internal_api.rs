// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `internal.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Each consumer and producer should send periodic heartbeats to the server
///  to let the server know that they are still active.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.HeartbeatRequest)
pub struct HeartbeatRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.HeartbeatRequest.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:protos.HeartbeatRequest.last_activity_unix_timestamp_utc)
    pub last_activity_unix_timestamp_utc: i64,
    // @@protoc_insertion_point(field:protos.HeartbeatRequest._metadata)
    pub _metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.HeartbeatRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HeartbeatRequest {
    fn default() -> &'a HeartbeatRequest {
        <HeartbeatRequest as ::protobuf::Message>::default_instance()
    }
}

impl HeartbeatRequest {
    pub fn new() -> HeartbeatRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &HeartbeatRequest| { &m.audience },
            |m: &mut HeartbeatRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_activity_unix_timestamp_utc",
            |m: &HeartbeatRequest| { &m.last_activity_unix_timestamp_utc },
            |m: &mut HeartbeatRequest| { &mut m.last_activity_unix_timestamp_utc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_metadata",
            |m: &HeartbeatRequest| { &m._metadata },
            |m: &mut HeartbeatRequest| { &mut m._metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HeartbeatRequest>(
            "HeartbeatRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HeartbeatRequest {
    const NAME: &'static str = "HeartbeatRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                16 => {
                    self.last_activity_unix_timestamp_utc = is.read_int64()?;
                },
                8002 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.last_activity_unix_timestamp_utc != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.last_activity_unix_timestamp_utc);
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.last_activity_unix_timestamp_utc != 0 {
            os.write_int64(2, self.last_activity_unix_timestamp_utc)?;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(8002)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HeartbeatRequest {
        HeartbeatRequest::new()
    }

    fn clear(&mut self) {
        self.audience.clear();
        self.last_activity_unix_timestamp_utc = 0;
        self._metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HeartbeatRequest {
        static instance: ::protobuf::rt::Lazy<HeartbeatRequest> = ::protobuf::rt::Lazy::new();
        instance.get(HeartbeatRequest::new)
    }
}

impl ::protobuf::MessageFull for HeartbeatRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HeartbeatRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HeartbeatRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartbeatRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.NotifyRequest)
pub struct NotifyRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.NotifyRequest.rule_id)
    pub rule_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.NotifyRequest.rule_name)
    pub rule_name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.NotifyRequest.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:protos.NotifyRequest.occurred_at_unix_ts_utc)
    pub occurred_at_unix_ts_utc: i64,
    // @@protoc_insertion_point(field:protos.NotifyRequest._metadata)
    pub _metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.NotifyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NotifyRequest {
    fn default() -> &'a NotifyRequest {
        <NotifyRequest as ::protobuf::Message>::default_instance()
    }
}

impl NotifyRequest {
    pub fn new() -> NotifyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rule_id",
            |m: &NotifyRequest| { &m.rule_id },
            |m: &mut NotifyRequest| { &mut m.rule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rule_name",
            |m: &NotifyRequest| { &m.rule_name },
            |m: &mut NotifyRequest| { &mut m.rule_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &NotifyRequest| { &m.audience },
            |m: &mut NotifyRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "occurred_at_unix_ts_utc",
            |m: &NotifyRequest| { &m.occurred_at_unix_ts_utc },
            |m: &mut NotifyRequest| { &mut m.occurred_at_unix_ts_utc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_metadata",
            |m: &NotifyRequest| { &m._metadata },
            |m: &mut NotifyRequest| { &mut m._metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NotifyRequest>(
            "NotifyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NotifyRequest {
    const NAME: &'static str = "NotifyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rule_id = is.read_string()?;
                },
                18 => {
                    self.rule_name = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                32 => {
                    self.occurred_at_unix_ts_utc = is.read_int64()?;
                },
                8002 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.rule_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rule_id);
        }
        if !self.rule_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rule_name);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.occurred_at_unix_ts_utc != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.occurred_at_unix_ts_utc);
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.rule_id.is_empty() {
            os.write_string(1, &self.rule_id)?;
        }
        if !self.rule_name.is_empty() {
            os.write_string(2, &self.rule_name)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.occurred_at_unix_ts_utc != 0 {
            os.write_int64(4, self.occurred_at_unix_ts_utc)?;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(8002)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NotifyRequest {
        NotifyRequest::new()
    }

    fn clear(&mut self) {
        self.rule_id.clear();
        self.rule_name.clear();
        self.audience.clear();
        self.occurred_at_unix_ts_utc = 0;
        self._metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NotifyRequest {
        static instance: ::protobuf::rt::Lazy<NotifyRequest> = ::protobuf::rt::Lazy::new();
        instance.get(NotifyRequest::new)
    }
}

impl ::protobuf::MessageFull for NotifyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NotifyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NotifyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotifyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.MetricsRequest)
pub struct MetricsRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.MetricsRequest.rule_id)
    pub rule_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.MetricsRequest.rule_name)
    pub rule_name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.MetricsRequest.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:protos.MetricsRequest._metadata)
    pub _metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.MetricsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricsRequest {
    fn default() -> &'a MetricsRequest {
        <MetricsRequest as ::protobuf::Message>::default_instance()
    }
}

impl MetricsRequest {
    pub fn new() -> MetricsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rule_id",
            |m: &MetricsRequest| { &m.rule_id },
            |m: &mut MetricsRequest| { &mut m.rule_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rule_name",
            |m: &MetricsRequest| { &m.rule_name },
            |m: &mut MetricsRequest| { &mut m.rule_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &MetricsRequest| { &m.audience },
            |m: &mut MetricsRequest| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_metadata",
            |m: &MetricsRequest| { &m._metadata },
            |m: &mut MetricsRequest| { &mut m._metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricsRequest>(
            "MetricsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricsRequest {
    const NAME: &'static str = "MetricsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.rule_id = is.read_string()?;
                },
                18 => {
                    self.rule_name = is.read_string()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                8002 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.rule_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rule_id);
        }
        if !self.rule_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rule_name);
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.rule_id.is_empty() {
            os.write_string(1, &self.rule_id)?;
        }
        if !self.rule_name.is_empty() {
            os.write_string(2, &self.rule_name)?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(8002)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricsRequest {
        MetricsRequest::new()
    }

    fn clear(&mut self) {
        self.rule_id.clear();
        self.rule_name.clear();
        self.audience.clear();
        self._metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricsRequest {
        static instance: ::protobuf::rt::Lazy<MetricsRequest> = ::protobuf::rt::Lazy::new();
        instance.get(MetricsRequest::new)
    }
}

impl ::protobuf::MessageFull for MetricsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.RegisterRequest)
pub struct RegisterRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.RegisterRequest.service_name)
    pub service_name: ::std::string::String,
    ///  If set, we know that any pipelines or steps executed in this SDK will NOT
    ///  modify the input/output data. As in, the SDK will log what it _would_ do
    ///  and always return the original data set.
    // @@protoc_insertion_point(field:protos.RegisterRequest.dry_run)
    pub dry_run: bool,
    ///  snitch-server uses this under the hood for debug
    // @@protoc_insertion_point(field:protos.RegisterRequest._metadata)
    pub _metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.RegisterRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterRequest {
    fn default() -> &'a RegisterRequest {
        <RegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterRequest {
    pub fn new() -> RegisterRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &RegisterRequest| { &m.service_name },
            |m: &mut RegisterRequest| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dry_run",
            |m: &RegisterRequest| { &m.dry_run },
            |m: &mut RegisterRequest| { &mut m.dry_run },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_metadata",
            |m: &RegisterRequest| { &m._metadata },
            |m: &mut RegisterRequest| { &mut m._metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterRequest>(
            "RegisterRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterRequest {
    const NAME: &'static str = "RegisterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service_name = is.read_string()?;
                },
                16 => {
                    self.dry_run = is.read_bool()?;
                },
                8002 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        if self.dry_run != false {
            my_size += 1 + 1;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        if self.dry_run != false {
            os.write_bool(2, self.dry_run)?;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(8002)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterRequest {
        RegisterRequest::new()
    }

    fn clear(&mut self) {
        self.service_name.clear();
        self.dry_run = false;
        self._metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterRequest {
        static instance: ::protobuf::rt::Lazy<RegisterRequest> = ::protobuf::rt::Lazy::new();
        instance.get(RegisterRequest::new)
    }
}

impl ::protobuf::MessageFull for RegisterRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Same as RegisterRequest - used for broadcasting a deregistration event
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.DeregisterRequest)
pub struct DeregisterRequest {
    // message fields
    // @@protoc_insertion_point(field:protos.DeregisterRequest.service_name)
    pub service_name: ::std::string::String,
    // @@protoc_insertion_point(field:protos.DeregisterRequest._metadata)
    pub _metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DeregisterRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeregisterRequest {
    fn default() -> &'a DeregisterRequest {
        <DeregisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeregisterRequest {
    pub fn new() -> DeregisterRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &DeregisterRequest| { &m.service_name },
            |m: &mut DeregisterRequest| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_metadata",
            |m: &DeregisterRequest| { &m._metadata },
            |m: &mut DeregisterRequest| { &mut m._metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeregisterRequest>(
            "DeregisterRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeregisterRequest {
    const NAME: &'static str = "DeregisterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service_name = is.read_string()?;
                },
                8002 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(8002)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeregisterRequest {
        DeregisterRequest::new()
    }

    fn clear(&mut self) {
        self.service_name.clear();
        self._metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeregisterRequest {
        static instance: ::protobuf::rt::Lazy<DeregisterRequest> = ::protobuf::rt::Lazy::new();
        instance.get(DeregisterRequest::new)
    }
}

impl ::protobuf::MessageFull for DeregisterRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeregisterRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeregisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeregisterRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Type used by `snitch-server` for sending messages on its local bus.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.BusEvent)
pub struct BusEvent {
    // message fields
    // @@protoc_insertion_point(field:protos.BusEvent.request_id)
    pub request_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.BusEvent.source)
    pub source: ::std::string::String,
    // @@protoc_insertion_point(field:protos.BusEvent._metadata)
    pub _metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // message oneof groups
    pub event: ::std::option::Option<bus_event::Event>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.BusEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BusEvent {
    fn default() -> &'a BusEvent {
        <BusEvent as ::protobuf::Message>::default_instance()
    }
}

impl BusEvent {
    pub fn new() -> BusEvent {
        ::std::default::Default::default()
    }

    // .protos.CommandResponse command_response = 100;

    pub fn command_response(&self) -> &CommandResponse {
        match self.event {
            ::std::option::Option::Some(bus_event::Event::CommandResponse(ref v)) => v,
            _ => <CommandResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_command_response(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_command_response(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(bus_event::Event::CommandResponse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_command_response(&mut self, v: CommandResponse) {
        self.event = ::std::option::Option::Some(bus_event::Event::CommandResponse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_command_response(&mut self) -> &mut CommandResponse {
        if let ::std::option::Option::Some(bus_event::Event::CommandResponse(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(bus_event::Event::CommandResponse(CommandResponse::new()));
        }
        match self.event {
            ::std::option::Option::Some(bus_event::Event::CommandResponse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_command_response(&mut self) -> CommandResponse {
        if self.has_command_response() {
            match self.event.take() {
                ::std::option::Option::Some(bus_event::Event::CommandResponse(v)) => v,
                _ => panic!(),
            }
        } else {
            CommandResponse::new()
        }
    }

    // .protos.RegisterRequest register_request = 101;

    pub fn register_request(&self) -> &RegisterRequest {
        match self.event {
            ::std::option::Option::Some(bus_event::Event::RegisterRequest(ref v)) => v,
            _ => <RegisterRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_register_request(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_register_request(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(bus_event::Event::RegisterRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_register_request(&mut self, v: RegisterRequest) {
        self.event = ::std::option::Option::Some(bus_event::Event::RegisterRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_register_request(&mut self) -> &mut RegisterRequest {
        if let ::std::option::Option::Some(bus_event::Event::RegisterRequest(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(bus_event::Event::RegisterRequest(RegisterRequest::new()));
        }
        match self.event {
            ::std::option::Option::Some(bus_event::Event::RegisterRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_register_request(&mut self) -> RegisterRequest {
        if self.has_register_request() {
            match self.event.take() {
                ::std::option::Option::Some(bus_event::Event::RegisterRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            RegisterRequest::new()
        }
    }

    // .protos.DeregisterRequest deregister_request = 102;

    pub fn deregister_request(&self) -> &DeregisterRequest {
        match self.event {
            ::std::option::Option::Some(bus_event::Event::DeregisterRequest(ref v)) => v,
            _ => <DeregisterRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_deregister_request(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_deregister_request(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(bus_event::Event::DeregisterRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deregister_request(&mut self, v: DeregisterRequest) {
        self.event = ::std::option::Option::Some(bus_event::Event::DeregisterRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_deregister_request(&mut self) -> &mut DeregisterRequest {
        if let ::std::option::Option::Some(bus_event::Event::DeregisterRequest(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(bus_event::Event::DeregisterRequest(DeregisterRequest::new()));
        }
        match self.event {
            ::std::option::Option::Some(bus_event::Event::DeregisterRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_deregister_request(&mut self) -> DeregisterRequest {
        if self.has_deregister_request() {
            match self.event.take() {
                ::std::option::Option::Some(bus_event::Event::DeregisterRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            DeregisterRequest::new()
        }
    }

    // .protos.HeartbeatRequest heartbeat_request = 103;

    pub fn heartbeat_request(&self) -> &HeartbeatRequest {
        match self.event {
            ::std::option::Option::Some(bus_event::Event::HeartbeatRequest(ref v)) => v,
            _ => <HeartbeatRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_heartbeat_request(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_heartbeat_request(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(bus_event::Event::HeartbeatRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_heartbeat_request(&mut self, v: HeartbeatRequest) {
        self.event = ::std::option::Option::Some(bus_event::Event::HeartbeatRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_heartbeat_request(&mut self) -> &mut HeartbeatRequest {
        if let ::std::option::Option::Some(bus_event::Event::HeartbeatRequest(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(bus_event::Event::HeartbeatRequest(HeartbeatRequest::new()));
        }
        match self.event {
            ::std::option::Option::Some(bus_event::Event::HeartbeatRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_heartbeat_request(&mut self) -> HeartbeatRequest {
        if self.has_heartbeat_request() {
            match self.event.take() {
                ::std::option::Option::Some(bus_event::Event::HeartbeatRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            HeartbeatRequest::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "request_id",
            |m: &BusEvent| { &m.request_id },
            |m: &mut BusEvent| { &mut m.request_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &BusEvent| { &m.source },
            |m: &mut BusEvent| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CommandResponse>(
            "command_response",
            BusEvent::has_command_response,
            BusEvent::command_response,
            BusEvent::mut_command_response,
            BusEvent::set_command_response,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, RegisterRequest>(
            "register_request",
            BusEvent::has_register_request,
            BusEvent::register_request,
            BusEvent::mut_register_request,
            BusEvent::set_register_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeregisterRequest>(
            "deregister_request",
            BusEvent::has_deregister_request,
            BusEvent::deregister_request,
            BusEvent::mut_deregister_request,
            BusEvent::set_deregister_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, HeartbeatRequest>(
            "heartbeat_request",
            BusEvent::has_heartbeat_request,
            BusEvent::heartbeat_request,
            BusEvent::mut_heartbeat_request,
            BusEvent::set_heartbeat_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_metadata",
            |m: &BusEvent| { &m._metadata },
            |m: &mut BusEvent| { &mut m._metadata },
        ));
        oneofs.push(bus_event::Event::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BusEvent>(
            "BusEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BusEvent {
    const NAME: &'static str = "BusEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.request_id = is.read_string()?;
                },
                18 => {
                    self.source = is.read_string()?;
                },
                802 => {
                    self.event = ::std::option::Option::Some(bus_event::Event::CommandResponse(is.read_message()?));
                },
                810 => {
                    self.event = ::std::option::Option::Some(bus_event::Event::RegisterRequest(is.read_message()?));
                },
                818 => {
                    self.event = ::std::option::Option::Some(bus_event::Event::DeregisterRequest(is.read_message()?));
                },
                826 => {
                    self.event = ::std::option::Option::Some(bus_event::Event::HeartbeatRequest(is.read_message()?));
                },
                8002 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source);
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let ::std::option::Option::Some(ref v) = self.event {
            match v {
                &bus_event::Event::CommandResponse(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bus_event::Event::RegisterRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bus_event::Event::DeregisterRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &bus_event::Event::HeartbeatRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        if !self.source.is_empty() {
            os.write_string(2, &self.source)?;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(8002)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.event {
            match v {
                &bus_event::Event::CommandResponse(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
                },
                &bus_event::Event::RegisterRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
                &bus_event::Event::DeregisterRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(102, v, os)?;
                },
                &bus_event::Event::HeartbeatRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(103, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BusEvent {
        BusEvent::new()
    }

    fn clear(&mut self) {
        self.request_id.clear();
        self.source.clear();
        self.event = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self._metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BusEvent {
        static instance: ::protobuf::rt::Lazy<BusEvent> = ::protobuf::rt::Lazy::new();
        instance.get(BusEvent::new)
    }
}

impl ::protobuf::MessageFull for BusEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BusEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BusEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BusEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BusEvent`
pub mod bus_event {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.BusEvent.event)
    pub enum Event {
        // @@protoc_insertion_point(oneof_field:protos.BusEvent.command_response)
        CommandResponse(super::CommandResponse),
        // @@protoc_insertion_point(oneof_field:protos.BusEvent.register_request)
        RegisterRequest(super::RegisterRequest),
        // @@protoc_insertion_point(oneof_field:protos.BusEvent.deregister_request)
        DeregisterRequest(super::DeregisterRequest),
        // @@protoc_insertion_point(oneof_field:protos.BusEvent.heartbeat_request)
        HeartbeatRequest(super::HeartbeatRequest),
    }

    impl ::protobuf::Oneof for Event {
    }

    impl ::protobuf::OneofFull for Event {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BusEvent as ::protobuf::MessageFull>::descriptor().oneof_by_name("event").unwrap()).clone()
        }
    }

    impl Event {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Event>("event")
        }
    }
}

///  The primary method to send commands to the SDK; server will send zero or more
///  RegisterResponse's with SetPipelineRequest on SDK instantiation.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.CommandResponse)
pub struct CommandResponse {
    // message fields
    ///  Who is this command intended for?
    // @@protoc_insertion_point(field:protos.CommandResponse.audience)
    pub audience: ::protobuf::MessageField<Audience>,
    // @@protoc_insertion_point(field:protos.CommandResponse._metadata)
    pub _metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // message oneof groups
    pub command: ::std::option::Option<command_response::Command>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.CommandResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CommandResponse {
    fn default() -> &'a CommandResponse {
        <CommandResponse as ::protobuf::Message>::default_instance()
    }
}

impl CommandResponse {
    pub fn new() -> CommandResponse {
        ::std::default::Default::default()
    }

    // .protos.SetPipelineCommand set_pipeline = 100;

    pub fn set_pipeline(&self) -> &super::pipeline::SetPipelineCommand {
        match self.command {
            ::std::option::Option::Some(command_response::Command::SetPipeline(ref v)) => v,
            _ => <super::pipeline::SetPipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_set_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_set_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command_response::Command::SetPipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_pipeline(&mut self, v: super::pipeline::SetPipelineCommand) {
        self.command = ::std::option::Option::Some(command_response::Command::SetPipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_pipeline(&mut self) -> &mut super::pipeline::SetPipelineCommand {
        if let ::std::option::Option::Some(command_response::Command::SetPipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command_response::Command::SetPipeline(super::pipeline::SetPipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command_response::Command::SetPipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_pipeline(&mut self) -> super::pipeline::SetPipelineCommand {
        if self.has_set_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command_response::Command::SetPipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pipeline::SetPipelineCommand::new()
        }
    }

    // .protos.DeletePipelineCommand delete_pipeline = 101;

    pub fn delete_pipeline(&self) -> &super::pipeline::DeletePipelineCommand {
        match self.command {
            ::std::option::Option::Some(command_response::Command::DeletePipeline(ref v)) => v,
            _ => <super::pipeline::DeletePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delete_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_delete_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command_response::Command::DeletePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete_pipeline(&mut self, v: super::pipeline::DeletePipelineCommand) {
        self.command = ::std::option::Option::Some(command_response::Command::DeletePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete_pipeline(&mut self) -> &mut super::pipeline::DeletePipelineCommand {
        if let ::std::option::Option::Some(command_response::Command::DeletePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command_response::Command::DeletePipeline(super::pipeline::DeletePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command_response::Command::DeletePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete_pipeline(&mut self) -> super::pipeline::DeletePipelineCommand {
        if self.has_delete_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command_response::Command::DeletePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pipeline::DeletePipelineCommand::new()
        }
    }

    // .protos.PausePipelineCommand pause_pipeline = 102;

    pub fn pause_pipeline(&self) -> &super::pipeline::PausePipelineCommand {
        match self.command {
            ::std::option::Option::Some(command_response::Command::PausePipeline(ref v)) => v,
            _ => <super::pipeline::PausePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pause_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_pause_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command_response::Command::PausePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pause_pipeline(&mut self, v: super::pipeline::PausePipelineCommand) {
        self.command = ::std::option::Option::Some(command_response::Command::PausePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pause_pipeline(&mut self) -> &mut super::pipeline::PausePipelineCommand {
        if let ::std::option::Option::Some(command_response::Command::PausePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command_response::Command::PausePipeline(super::pipeline::PausePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command_response::Command::PausePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pause_pipeline(&mut self) -> super::pipeline::PausePipelineCommand {
        if self.has_pause_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command_response::Command::PausePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pipeline::PausePipelineCommand::new()
        }
    }

    // .protos.UnpausePipelineCommand unpause_pipeline = 103;

    pub fn unpause_pipeline(&self) -> &super::pipeline::UnpausePipelineCommand {
        match self.command {
            ::std::option::Option::Some(command_response::Command::UnpausePipeline(ref v)) => v,
            _ => <super::pipeline::UnpausePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_unpause_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_unpause_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command_response::Command::UnpausePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unpause_pipeline(&mut self, v: super::pipeline::UnpausePipelineCommand) {
        self.command = ::std::option::Option::Some(command_response::Command::UnpausePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unpause_pipeline(&mut self) -> &mut super::pipeline::UnpausePipelineCommand {
        if let ::std::option::Option::Some(command_response::Command::UnpausePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command_response::Command::UnpausePipeline(super::pipeline::UnpausePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command_response::Command::UnpausePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unpause_pipeline(&mut self) -> super::pipeline::UnpausePipelineCommand {
        if self.has_unpause_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command_response::Command::UnpausePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            super::pipeline::UnpausePipelineCommand::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Audience>(
            "audience",
            |m: &CommandResponse| { &m.audience },
            |m: &mut CommandResponse| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pipeline::SetPipelineCommand>(
            "set_pipeline",
            CommandResponse::has_set_pipeline,
            CommandResponse::set_pipeline,
            CommandResponse::mut_set_pipeline,
            CommandResponse::set_set_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pipeline::DeletePipelineCommand>(
            "delete_pipeline",
            CommandResponse::has_delete_pipeline,
            CommandResponse::delete_pipeline,
            CommandResponse::mut_delete_pipeline,
            CommandResponse::set_delete_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pipeline::PausePipelineCommand>(
            "pause_pipeline",
            CommandResponse::has_pause_pipeline,
            CommandResponse::pause_pipeline,
            CommandResponse::mut_pause_pipeline,
            CommandResponse::set_pause_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::pipeline::UnpausePipelineCommand>(
            "unpause_pipeline",
            CommandResponse::has_unpause_pipeline,
            CommandResponse::unpause_pipeline,
            CommandResponse::mut_unpause_pipeline,
            CommandResponse::set_unpause_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "_metadata",
            |m: &CommandResponse| { &m._metadata },
            |m: &mut CommandResponse| { &mut m._metadata },
        ));
        oneofs.push(command_response::Command::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CommandResponse>(
            "CommandResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CommandResponse {
    const NAME: &'static str = "CommandResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                802 => {
                    self.command = ::std::option::Option::Some(command_response::Command::SetPipeline(is.read_message()?));
                },
                810 => {
                    self.command = ::std::option::Option::Some(command_response::Command::DeletePipeline(is.read_message()?));
                },
                818 => {
                    self.command = ::std::option::Option::Some(command_response::Command::PausePipeline(is.read_message()?));
                },
                826 => {
                    self.command = ::std::option::Option::Some(command_response::Command::UnpausePipeline(is.read_message()?));
                },
                8002 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self._metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command_response::Command::SetPipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command_response::Command::DeletePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command_response::Command::PausePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command_response::Command::UnpausePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for (k, v) in &self._metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(8002)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command_response::Command::SetPipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
                },
                &command_response::Command::DeletePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
                &command_response::Command::PausePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(102, v, os)?;
                },
                &command_response::Command::UnpausePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(103, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CommandResponse {
        CommandResponse::new()
    }

    fn clear(&mut self) {
        self.audience.clear();
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self._metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CommandResponse {
        static instance: ::protobuf::rt::Lazy<CommandResponse> = ::protobuf::rt::Lazy::new();
        instance.get(CommandResponse::new)
    }
}

impl ::protobuf::MessageFull for CommandResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CommandResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CommandResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CommandResponse`
pub mod command_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.CommandResponse.command)
    pub enum Command {
        // @@protoc_insertion_point(oneof_field:protos.CommandResponse.set_pipeline)
        SetPipeline(super::super::pipeline::SetPipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.CommandResponse.delete_pipeline)
        DeletePipeline(super::super::pipeline::DeletePipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.CommandResponse.pause_pipeline)
        PausePipeline(super::super::pipeline::PausePipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.CommandResponse.unpause_pipeline)
        UnpausePipeline(super::super::pipeline::UnpausePipelineCommand),
    }

    impl ::protobuf::Oneof for Command {
    }

    impl ::protobuf::OneofFull for Command {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CommandResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("command").unwrap()).clone()
        }
    }

    impl Command {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Command>("command")
        }
    }
}

///  Used to indicate who a request/command is intended for
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protos.Audience)
pub struct Audience {
    // message fields
    ///  Name of the service
    // @@protoc_insertion_point(field:protos.Audience.service_name)
    pub service_name: ::std::string::String,
    ///  Name of the component the SDK is interacting with (ie. kafka-$topic-name)
    // @@protoc_insertion_point(field:protos.Audience.component_name)
    pub component_name: ::std::string::String,
    ///  Consumer or Producer
    // @@protoc_insertion_point(field:protos.Audience.operation_type)
    pub operation_type: ::protobuf::EnumOrUnknown<OperationType>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Audience.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Audience {
    fn default() -> &'a Audience {
        <Audience as ::protobuf::Message>::default_instance()
    }
}

impl Audience {
    pub fn new() -> Audience {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &Audience| { &m.service_name },
            |m: &mut Audience| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "component_name",
            |m: &Audience| { &m.component_name },
            |m: &mut Audience| { &mut m.component_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "operation_type",
            |m: &Audience| { &m.operation_type },
            |m: &mut Audience| { &mut m.operation_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Audience>(
            "Audience",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Audience {
    const NAME: &'static str = "Audience";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service_name = is.read_string()?;
                },
                18 => {
                    self.component_name = is.read_string()?;
                },
                24 => {
                    self.operation_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        if !self.component_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.component_name);
        }
        if self.operation_type != ::protobuf::EnumOrUnknown::new(OperationType::OPERATION_TYPE_UNSET) {
            my_size += ::protobuf::rt::int32_size(3, self.operation_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        if !self.component_name.is_empty() {
            os.write_string(2, &self.component_name)?;
        }
        if self.operation_type != ::protobuf::EnumOrUnknown::new(OperationType::OPERATION_TYPE_UNSET) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.operation_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Audience {
        Audience::new()
    }

    fn clear(&mut self) {
        self.service_name.clear();
        self.component_name.clear();
        self.operation_type = ::protobuf::EnumOrUnknown::new(OperationType::OPERATION_TYPE_UNSET);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Audience {
        static instance: Audience = Audience {
            service_name: ::std::string::String::new(),
            component_name: ::std::string::String::new(),
            operation_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Audience {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Audience").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Audience {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Audience {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Types of commands that can be sent to the SDK
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.CommandType)
pub enum CommandType {
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_UNSET)
    SNITCH_COMMAND_TYPE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_KEEPALIVE)
    SNITCH_COMMAND_TYPE_KEEPALIVE = 1,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_SET_PIPELINE)
    SNITCH_COMMAND_TYPE_SET_PIPELINE = 2,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_DELETE_PIPELINE)
    SNITCH_COMMAND_TYPE_DELETE_PIPELINE = 3,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_PAUSE_PIPELINE)
    SNITCH_COMMAND_TYPE_PAUSE_PIPELINE = 4,
    // @@protoc_insertion_point(enum_value:protos.CommandType.SNITCH_COMMAND_TYPE_UNPAUSE_PIPELINE)
    SNITCH_COMMAND_TYPE_UNPAUSE_PIPELINE = 5,
}

impl ::protobuf::Enum for CommandType {
    const NAME: &'static str = "CommandType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CommandType> {
        match value {
            0 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_UNSET),
            1 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_KEEPALIVE),
            2 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_SET_PIPELINE),
            3 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_DELETE_PIPELINE),
            4 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_PAUSE_PIPELINE),
            5 => ::std::option::Option::Some(CommandType::SNITCH_COMMAND_TYPE_UNPAUSE_PIPELINE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CommandType] = &[
        CommandType::SNITCH_COMMAND_TYPE_UNSET,
        CommandType::SNITCH_COMMAND_TYPE_KEEPALIVE,
        CommandType::SNITCH_COMMAND_TYPE_SET_PIPELINE,
        CommandType::SNITCH_COMMAND_TYPE_DELETE_PIPELINE,
        CommandType::SNITCH_COMMAND_TYPE_PAUSE_PIPELINE,
        CommandType::SNITCH_COMMAND_TYPE_UNPAUSE_PIPELINE,
    ];
}

impl ::protobuf::EnumFull for CommandType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CommandType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CommandType {
    fn default() -> Self {
        CommandType::SNITCH_COMMAND_TYPE_UNSET
    }
}

impl CommandType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CommandType>("CommandType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.OperationType)
pub enum OperationType {
    // @@protoc_insertion_point(enum_value:protos.OperationType.OPERATION_TYPE_UNSET)
    OPERATION_TYPE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.OperationType.OPERATION_TYPE_CONSUMER)
    OPERATION_TYPE_CONSUMER = 1,
    // @@protoc_insertion_point(enum_value:protos.OperationType.OPERATION_TYPE_PRODUCER)
    OPERATION_TYPE_PRODUCER = 2,
}

impl ::protobuf::Enum for OperationType {
    const NAME: &'static str = "OperationType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OperationType> {
        match value {
            0 => ::std::option::Option::Some(OperationType::OPERATION_TYPE_UNSET),
            1 => ::std::option::Option::Some(OperationType::OPERATION_TYPE_CONSUMER),
            2 => ::std::option::Option::Some(OperationType::OPERATION_TYPE_PRODUCER),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [OperationType] = &[
        OperationType::OPERATION_TYPE_UNSET,
        OperationType::OPERATION_TYPE_CONSUMER,
        OperationType::OPERATION_TYPE_PRODUCER,
    ];
}

impl ::protobuf::EnumFull for OperationType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("OperationType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for OperationType {
    fn default() -> Self {
        OperationType::OPERATION_TYPE_UNSET
    }
}

impl OperationType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<OperationType>("OperationType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12internal_api.proto\x12\x06protos\x1a\x0ccommon.proto\x1a\x0epipeli\
    ne.proto\"\x8b\x02\n\x10HeartbeatRequest\x12,\n\x08audience\x18\x01\x20\
    \x01(\x0b2\x10.protos.AudienceR\x08audience\x12F\n\x20last_activity_unix\
    _timestamp_utc\x18\x02\x20\x01(\x03R\x1clastActivityUnixTimestampUtc\x12\
    D\n\t_metadata\x18\xe8\x07\x20\x03(\x0b2&.protos.HeartbeatRequest.Metada\
    taEntryR\x08Metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\
    \x01\"\xa9\x02\n\rNotifyRequest\x12\x17\n\x07rule_id\x18\x01\x20\x01(\tR\
    \x06ruleId\x12\x1b\n\trule_name\x18\x02\x20\x01(\tR\x08ruleName\x12,\n\
    \x08audience\x18\x03\x20\x01(\x0b2\x10.protos.AudienceR\x08audience\x124\
    \n\x17occurred_at_unix_ts_utc\x18\x04\x20\x01(\x03R\x13occurredAtUnixTsU\
    tc\x12A\n\t_metadata\x18\xe8\x07\x20\x03(\x0b2#.protos.NotifyRequest.Met\
    adataEntryR\x08Metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x02\
    8\x01\"\xf5\x01\n\x0eMetricsRequest\x12\x17\n\x07rule_id\x18\x01\x20\x01\
    (\tR\x06ruleId\x12\x1b\n\trule_name\x18\x02\x20\x01(\tR\x08ruleName\x12,\
    \n\x08audience\x18\x03\x20\x01(\x0b2\x10.protos.AudienceR\x08audience\
    \x12B\n\t_metadata\x18\xe8\x07\x20\x03(\x0b2$.protos.MetricsRequest.Meta\
    dataEntryR\x08Metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x02\
    8\x01\"\xcf\x01\n\x0fRegisterRequest\x12!\n\x0cservice_name\x18\x01\x20\
    \x01(\tR\x0bserviceName\x12\x17\n\x07dry_run\x18\x02\x20\x01(\x08R\x06dr\
    yRun\x12C\n\t_metadata\x18\xe8\x07\x20\x03(\x0b2%.protos.RegisterRequest\
    .MetadataEntryR\x08Metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\
    \x028\x01\"\xba\x01\n\x11DeregisterRequest\x12!\n\x0cservice_name\x18\
    \x01\x20\x01(\tR\x0bserviceName\x12E\n\t_metadata\x18\xe8\x07\x20\x03(\
    \x0b2'.protos.DeregisterRequest.MetadataEntryR\x08Metadata\x1a;\n\rMetad\
    ataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xe6\x03\n\x08BusEvent\x12\x1d\
    \n\nrequest_id\x18\x01\x20\x01(\tR\trequestId\x12\x16\n\x06source\x18\
    \x02\x20\x01(\tR\x06source\x12D\n\x10command_response\x18d\x20\x01(\x0b2\
    \x17.protos.CommandResponseH\0R\x0fcommandResponse\x12D\n\x10register_re\
    quest\x18e\x20\x01(\x0b2\x17.protos.RegisterRequestH\0R\x0fregisterReque\
    st\x12J\n\x12deregister_request\x18f\x20\x01(\x0b2\x19.protos.Deregister\
    RequestH\0R\x11deregisterRequest\x12G\n\x11heartbeat_request\x18g\x20\
    \x01(\x0b2\x18.protos.HeartbeatRequestH\0R\x10heartbeatRequest\x12<\n\t_\
    metadata\x18\xe8\x07\x20\x03(\x0b2\x1e.protos.BusEvent.MetadataEntryR\
    \x08Metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01B\x07\n\
    \x05event\"\xeb\x03\n\x0fCommandResponse\x12,\n\x08audience\x18\x01\x20\
    \x01(\x0b2\x10.protos.AudienceR\x08audience\x12?\n\x0cset_pipeline\x18d\
    \x20\x01(\x0b2\x1a.protos.SetPipelineCommandH\0R\x0bsetPipeline\x12H\n\
    \x0fdelete_pipeline\x18e\x20\x01(\x0b2\x1d.protos.DeletePipelineCommandH\
    \0R\x0edeletePipeline\x12E\n\x0epause_pipeline\x18f\x20\x01(\x0b2\x1c.pr\
    otos.PausePipelineCommandH\0R\rpausePipeline\x12K\n\x10unpause_pipeline\
    \x18g\x20\x01(\x0b2\x1e.protos.UnpausePipelineCommandH\0R\x0funpausePipe\
    line\x12C\n\t_metadata\x18\xe8\x07\x20\x03(\x0b2%.protos.CommandResponse\
    .MetadataEntryR\x08Metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\
    \x028\x01B\t\n\x07command\"\x92\x01\n\x08Audience\x12!\n\x0cservice_name\
    \x18\x01\x20\x01(\tR\x0bserviceName\x12%\n\x0ecomponent_name\x18\x02\x20\
    \x01(\tR\rcomponentName\x12<\n\x0eoperation_type\x18\x03\x20\x01(\x0e2\
    \x15.protos.OperationTypeR\roperationType*\xf0\x01\n\x0bCommandType\x12\
    \x1d\n\x19SNITCH_COMMAND_TYPE_UNSET\x10\0\x12!\n\x1dSNITCH_COMMAND_TYPE_\
    KEEPALIVE\x10\x01\x12$\n\x20SNITCH_COMMAND_TYPE_SET_PIPELINE\x10\x02\x12\
    '\n#SNITCH_COMMAND_TYPE_DELETE_PIPELINE\x10\x03\x12&\n\"SNITCH_COMMAND_T\
    YPE_PAUSE_PIPELINE\x10\x04\x12(\n$SNITCH_COMMAND_TYPE_UNPAUSE_PIPELINE\
    \x10\x05*c\n\rOperationType\x12\x18\n\x14OPERATION_TYPE_UNSET\x10\0\x12\
    \x1b\n\x17OPERATION_TYPE_CONSUMER\x10\x01\x12\x1b\n\x17OPERATION_TYPE_PR\
    ODUCER\x10\x022\x83\x02\n\x08Internal\x12>\n\x08Register\x12\x17.protos.\
    RegisterRequest\x1a\x17.protos.CommandResponse0\x01\x12?\n\tHeartbeat\
    \x12\x18.protos.HeartbeatRequest\x1a\x18.protos.StandardResponse\x129\n\
    \x06Notify\x12\x15.protos.NotifyRequest\x1a\x18.protos.StandardResponse\
    \x12;\n\x07Metrics\x12\x16.protos.MetricsRequest\x1a\x18.protos.Standard\
    ResponseB4Z2github.com/streamdal/snitch-protos/build/go/protosJ\x91#\n\
    \x07\x12\x05\0\0\x86\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x04\0\x16\n\t\n\x02\x03\
    \x01\x12\x03\x05\0\x18\n\x08\n\x01\x08\x12\x03\x07\0I\n\t\n\x02\x08\x0b\
    \x12\x03\x07\0I\n\n\n\x02\x06\0\x12\x04\t\0\x1b\x01\n\n\n\x03\x06\0\x01\
    \x12\x03\t\x08\x10\n\xbc\x02\n\x04\x06\0\x02\0\x12\x03\x0f\x02A\x1a\xae\
    \x02\x20Initial\x20method\x20that\x20an\x20SDK\x20should\x20call\x20to\
    \x20register\x20itself\x20with\x20the\x20server.\n\x20The\x20server\x20w\
    ill\x20use\x20this\x20stream\x20to\x20send\x20commands\x20to\x20the\x20S\
    DK\x20via\x20the\n\x20`CommandResponse`\x20message.\x20Clients\x20should\
    \x20continuously\x20listen\x20for\n\x20CommandResponse\x20messages\x20an\
    d\x20re-establish\x20registration\x20if\x20the\x20stream\x20gets\n\x20di\
    sconnected.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0f\x06\x0e\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x0f\x0f\x1e\n\x0c\n\x05\x06\0\x02\0\x06\x12\
    \x03\x0f)/\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0f0?\n\x84\x01\n\x04\x06\
    \0\x02\x01\x12\x03\x13\x02=\x1aw\x20SDK\x20is\x20responsible\x20for\x20s\
    ending\x20heartbeats\x20to\x20the\x20server\x20to\x20let\x20the\x20serve\
    r\n\x20know\x20about\x20active\x20consumers\x20and\x20producers.\n\n\x0c\
    \n\x05\x06\0\x02\x01\x01\x12\x03\x13\x06\x0f\n\x0c\n\x05\x06\0\x02\x01\
    \x02\x12\x03\x13\x10\x20\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x13+;\n\
    \x86\x01\n\x04\x06\0\x02\x02\x12\x03\x17\x027\x1ay\x20Use\x20this\x20met\
    hod\x20when\x20Notify\x20condition\x20has\x20been\x20triggered;\x20the\
    \x20server\x20will\n\x20decide\x20on\x20what\x20to\x20do\x20about\x20the\
    \x20notification.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x17\x06\x0c\n\
    \x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x17\r\x1a\n\x0c\n\x05\x06\0\x02\x02\
    \x03\x12\x03\x17%5\n2\n\x04\x06\0\x02\x03\x12\x03\x1a\x029\x1a%\x20Send\
    \x20periodic\x20metrics\x20to\x20the\x20server\n\n\x0c\n\x05\x06\0\x02\
    \x03\x01\x12\x03\x1a\x06\r\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x1a\x0e\
    \x1c\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x1a'7\n\x8a\x01\n\x02\x04\0\
    \x12\x04\x1f\0$\x01\x1a~\x20Each\x20consumer\x20and\x20producer\x20shoul\
    d\x20send\x20periodic\x20heartbeats\x20to\x20the\x20server\n\x20to\x20le\
    t\x20the\x20server\x20know\x20that\x20they\x20are\x20still\x20active.\n\
    \n\n\n\x03\x04\0\x01\x12\x03\x1f\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x20\x02\x18\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x20\x02\n\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x20\x0b\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x20\x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03!\x02-\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03!\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03!\x08\
    (\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03!+,\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03#\x02(\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03#\x02\x16\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03#\x17\x20\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03##'\n\n\n\x02\x04\x01\x12\x04&\0-\x01\n\n\n\x03\x04\x01\x01\x12\x03&\
    \x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03'\x02\x15\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03'\t\x10\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03'\x13\x14\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03(\x02\x17\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03(\x02\x08\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03(\t\x12\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03(\x15\x16\n\x0b\n\x04\x04\x01\x02\x02\x12\x03)\x02\x18\n\
    \x0c\n\x05\x04\x01\x02\x02\x06\x12\x03)\x02\n\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03)\x0b\x13\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03)\x16\
    \x17\n\x0b\n\x04\x04\x01\x02\x03\x12\x03*\x02$\n\x0c\n\x05\x04\x01\x02\
    \x03\x05\x12\x03*\x02\x07\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03*\x08\
    \x1f\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03*\"#\n\x0b\n\x04\x04\x01\x02\
    \x04\x12\x03,\x02(\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03,\x02\x16\n\
    \x0c\n\x05\x04\x01\x02\x04\x01\x12\x03,\x17\x20\n\x0c\n\x05\x04\x01\x02\
    \x04\x03\x12\x03,#'\n\n\n\x02\x04\x02\x12\x04/\05\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03/\x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x030\x02\x15\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x030\t\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x030\x13\x14\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x031\x02\x17\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x031\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x031\t\x12\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x031\x15\x16\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x032\x02\x18\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x032\x02\n\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x032\x0b\x13\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x032\x16\x17\n\x0b\n\x04\x04\x02\x02\x03\x12\x034\x02(\n\x0c\n\
    \x05\x04\x02\x02\x03\x06\x12\x034\x02\x16\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x034\x17\x20\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x034#'\n\n\n\
    \x02\x04\x03\x12\x047\0A\x01\n\n\n\x03\x04\x03\x01\x12\x037\x08\x17\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x038\x02\x1a\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x038\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x038\t\x15\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x038\x18\x19\n\xcd\x01\n\x04\x04\x03\x02\x01\
    \x12\x03=\x02\x13\x1a\xbf\x01\x20If\x20set,\x20we\x20know\x20that\x20any\
    \x20pipelines\x20or\x20steps\x20executed\x20in\x20this\x20SDK\x20will\
    \x20NOT\n\x20modify\x20the\x20input/output\x20data.\x20As\x20in,\x20the\
    \x20SDK\x20will\x20log\x20what\x20it\x20_would_\x20do\n\x20and\x20always\
    \x20return\x20the\x20original\x20data\x20set.\n\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03=\x02\x06\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03=\x07\
    \x0e\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03=\x11\x12\n?\n\x04\x04\x03\
    \x02\x02\x12\x03@\x02(\x1a2\x20snitch-server\x20uses\x20this\x20under\
    \x20the\x20hood\x20for\x20debug\n\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\
    \x03@\x02\x16\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03@\x17\x20\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x03@#'\nT\n\x02\x04\x04\x12\x04D\0H\x01\x1a\
    H\x20Same\x20as\x20RegisterRequest\x20-\x20used\x20for\x20broadcasting\
    \x20a\x20deregistration\x20event\n\n\n\n\x03\x04\x04\x01\x12\x03D\x08\
    \x19\n\x0b\n\x04\x04\x04\x02\0\x12\x03E\x02\x1a\n\x0c\n\x05\x04\x04\x02\
    \0\x05\x12\x03E\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03E\t\x15\n\
    \x0c\n\x05\x04\x04\x02\0\x03\x12\x03E\x18\x19\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03G\x02(\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03G\x02\x16\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03G\x17\x20\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03G#'\nQ\n\x02\x04\x05\x12\x04K\0W\x01\x1aE\x20Type\x20use\
    d\x20by\x20`snitch-server`\x20for\x20sending\x20messages\x20on\x20its\
    \x20local\x20bus.\n\n\n\n\x03\x04\x05\x01\x12\x03K\x08\x10\n\x0b\n\x04\
    \x04\x05\x02\0\x12\x03L\x02\x18\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03L\
    \x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03L\t\x13\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x03L\x16\x17\n\x0b\n\x04\x04\x05\x02\x01\x12\x03M\x02\
    \x14\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03M\x02\x08\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03M\t\x0f\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03M\
    \x12\x13\n\x0c\n\x04\x04\x05\x08\0\x12\x04O\x02T\x03\n\x0c\n\x05\x04\x05\
    \x08\0\x01\x12\x03O\x08\r\n\x0b\n\x04\x04\x05\x02\x02\x12\x03P\x04+\n\
    \x0c\n\x05\x04\x05\x02\x02\x06\x12\x03P\x04\x13\n\x0c\n\x05\x04\x05\x02\
    \x02\x01\x12\x03P\x14$\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03P'*\n\x0b\
    \n\x04\x04\x05\x02\x03\x12\x03Q\x04+\n\x0c\n\x05\x04\x05\x02\x03\x06\x12\
    \x03Q\x04\x13\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03Q\x14$\n\x0c\n\x05\
    \x04\x05\x02\x03\x03\x12\x03Q'*\n\x0b\n\x04\x04\x05\x02\x04\x12\x03R\x04\
    /\n\x0c\n\x05\x04\x05\x02\x04\x06\x12\x03R\x04\x15\n\x0c\n\x05\x04\x05\
    \x02\x04\x01\x12\x03R\x16(\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03R+.\n\
    \x0b\n\x04\x04\x05\x02\x05\x12\x03S\x04-\n\x0c\n\x05\x04\x05\x02\x05\x06\
    \x12\x03S\x04\x14\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\x03S\x15&\n\x0c\n\
    \x05\x04\x05\x02\x05\x03\x12\x03S),\n\x0b\n\x04\x04\x05\x02\x06\x12\x03V\
    \x02(\n\x0c\n\x05\x04\x05\x02\x06\x06\x12\x03V\x02\x16\n\x0c\n\x05\x04\
    \x05\x02\x06\x01\x12\x03V\x17\x20\n\x0c\n\x05\x04\x05\x02\x06\x03\x12\
    \x03V#'\n\x9e\x01\n\x02\x04\x06\x12\x04[\0g\x01\x1a\x91\x01\x20The\x20pr\
    imary\x20method\x20to\x20send\x20commands\x20to\x20the\x20SDK;\x20server\
    \x20will\x20send\x20zero\x20or\x20more\n\x20RegisterResponse's\x20with\
    \x20SetPipelineRequest\x20on\x20SDK\x20instantiation.\n\n\n\n\x03\x04\
    \x06\x01\x12\x03[\x08\x17\n0\n\x04\x04\x06\x02\0\x12\x03]\x02\x18\x1a#\
    \x20Who\x20is\x20this\x20command\x20intended\x20for?\n\n\x0c\n\x05\x04\
    \x06\x02\0\x06\x12\x03]\x02\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03]\x0b\
    \x13\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03]\x16\x17\n\x0c\n\x04\x04\x06\
    \x08\0\x12\x04_\x02d\x03\n\x0c\n\x05\x04\x06\x08\0\x01\x12\x03_\x08\x0f\
    \n\x0b\n\x04\x04\x06\x02\x01\x12\x03`\x041\n\x0c\n\x05\x04\x06\x02\x01\
    \x06\x12\x03`\x04\x1d\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03`\x1e*\n\
    \x0c\n\x05\x04\x06\x02\x01\x03\x12\x03`-0\n(\n\x04\x04\x06\x02\x02\x12\
    \x03a\x047\"\x1b\x20Hmm,\x20should\x20this\x20be\x20here?\n\n\x0c\n\x05\
    \x04\x06\x02\x02\x06\x12\x03a\x04\x20\n\x0c\n\x05\x04\x06\x02\x02\x01\
    \x12\x03a!0\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03a36\n\x0b\n\x04\x04\
    \x06\x02\x03\x12\x03b\x045\n\x0c\n\x05\x04\x06\x02\x03\x06\x12\x03b\x04\
    \x1f\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03b\x20.\n\x0c\n\x05\x04\x06\
    \x02\x03\x03\x12\x03b14\n\x0b\n\x04\x04\x06\x02\x04\x12\x03c\x049\n\x0c\
    \n\x05\x04\x06\x02\x04\x06\x12\x03c\x04!\n\x0c\n\x05\x04\x06\x02\x04\x01\
    \x12\x03c\"2\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x03c58\n\x0b\n\x04\x04\
    \x06\x02\x05\x12\x03f\x02(\n\x0c\n\x05\x04\x06\x02\x05\x06\x12\x03f\x02\
    \x16\n\x0c\n\x05\x04\x06\x02\x05\x01\x12\x03f\x17\x20\n\x0c\n\x05\x04\
    \x06\x02\x05\x03\x12\x03f#'\n;\n\x02\x05\0\x12\x04j\0t\x01\x1a/\x20Types\
    \x20of\x20commands\x20that\x20can\x20be\x20sent\x20to\x20the\x20SDK\n\n\
    \n\n\x03\x05\0\x01\x12\x03j\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03k\x02\
    \x20\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03k\x02\x1b\n\x0c\n\x05\x05\0\x02\
    \0\x02\x12\x03k\x1e\x1f\n\x82\x01\n\x04\x05\0\x02\x01\x12\x03l\x02$\"u\
    \x20Use\x20this\x20to\x20keep\x20connection\x20alive;\x20SDK\x20doesn't\
    \x20need\x20to\x20do\x20anything\x20with\x20this\x20-\x20it's\x20there\
    \x20just\x20to\x20keep\x20things\x20alive\n\n\x0c\n\x05\x05\0\x02\x01\
    \x01\x12\x03l\x02\x1f\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03l\"#\n\x0b\n\
    \x04\x05\0\x02\x02\x12\x03m\x02'\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03m\
    \x02\"\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03m%&\n\x0b\n\x04\x05\0\x02\
    \x03\x12\x03n\x02*\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03n\x02%\n\x0c\n\
    \x05\x05\0\x02\x03\x02\x12\x03n()\n\x0b\n\x04\x05\0\x02\x04\x12\x03o\x02\
    )\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03o\x02$\n\x0c\n\x05\x05\0\x02\x04\
    \x02\x12\x03o'(\n\x0b\n\x04\x05\0\x02\x05\x12\x03p\x02+\n\x0c\n\x05\x05\
    \0\x02\x05\x01\x12\x03p\x02&\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03p)*\n\
    \n\n\x02\x05\x01\x12\x04v\0z\x01\n\n\n\x03\x05\x01\x01\x12\x03v\x05\x12\
    \n\x0b\n\x04\x05\x01\x02\0\x12\x03w\x02\x1b\n\x0c\n\x05\x05\x01\x02\0\
    \x01\x12\x03w\x02\x16\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03w\x19\x1a\n\
    \x0b\n\x04\x05\x01\x02\x01\x12\x03x\x02\x1e\n\x0c\n\x05\x05\x01\x02\x01\
    \x01\x12\x03x\x02\x19\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03x\x1c\x1d\n\
    \x0b\n\x04\x05\x01\x02\x02\x12\x03y\x02\x1e\n\x0c\n\x05\x05\x01\x02\x02\
    \x01\x12\x03y\x02\x19\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03y\x1c\x1d\n\
    E\n\x02\x04\x07\x12\x05}\0\x86\x01\x01\x1a8\x20Used\x20to\x20indicate\
    \x20who\x20a\x20request/command\x20is\x20intended\x20for\n\n\n\n\x03\x04\
    \x07\x01\x12\x03}\x08\x10\n\"\n\x04\x04\x07\x02\0\x12\x03\x7f\x02\x1a\
    \x1a\x15\x20Name\x20of\x20the\x20service\n\n\x0c\n\x05\x04\x07\x02\0\x05\
    \x12\x03\x7f\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03\x7f\t\x15\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x03\x7f\x18\x19\nY\n\x04\x04\x07\x02\
    \x01\x12\x04\x82\x01\x02\x1c\x1aK\x20Name\x20of\x20the\x20component\x20t\
    he\x20SDK\x20is\x20interacting\x20with\x20(ie.\x20kafka-$topic-name)\n\n\
    \r\n\x05\x04\x07\x02\x01\x05\x12\x04\x82\x01\x02\x08\n\r\n\x05\x04\x07\
    \x02\x01\x01\x12\x04\x82\x01\t\x17\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\
    \x82\x01\x1a\x1b\n$\n\x04\x04\x07\x02\x02\x12\x04\x85\x01\x02#\x1a\x16\
    \x20Consumer\x20or\x20Producer\n\n\r\n\x05\x04\x07\x02\x02\x06\x12\x04\
    \x85\x01\x02\x0f\n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\x85\x01\x10\x1e\n\
    \r\n\x05\x04\x07\x02\x02\x03\x12\x04\x85\x01!\"b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::common::file_descriptor().clone());
            deps.push(super::pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(HeartbeatRequest::generated_message_descriptor_data());
            messages.push(NotifyRequest::generated_message_descriptor_data());
            messages.push(MetricsRequest::generated_message_descriptor_data());
            messages.push(RegisterRequest::generated_message_descriptor_data());
            messages.push(DeregisterRequest::generated_message_descriptor_data());
            messages.push(BusEvent::generated_message_descriptor_data());
            messages.push(CommandResponse::generated_message_descriptor_data());
            messages.push(Audience::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(CommandType::generated_enum_descriptor_data());
            enums.push(OperationType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
